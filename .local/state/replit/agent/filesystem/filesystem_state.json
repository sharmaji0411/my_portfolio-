{"file_contents":{"DEVELOPMENT.md":{"content":"# 🛠️ Development Guide\n\n## Development Environment Setup\n\n### Required Tools\n- **Node.js 18+** with npm\n- **Python 3.11+** (for Python backend)\n- **Git**\n- **Code Editor** (VS Code recommended)\n\n### VS Code Extensions (Recommended)\n- ES7+ React/Redux/React-Native snippets\n- Tailwind CSS IntelliSense\n- TypeScript Importer\n- Python (if using Python backend)\n- Prettier - Code formatter\n\n## Project Architecture\n\n### Frontend (React + TypeScript)\n```\nclient/src/\n├── components/           # Reusable UI components\n│   ├── ui/              # shadcn/ui components\n│   ├── hero-section.tsx # Landing section\n│   ├── about-section.tsx # About me section\n│   └── ...              # Other sections\n├── pages/               # Page components\n├── hooks/               # Custom React hooks\n├── lib/                 # Utilities and configurations\n└── main.tsx            # Application entry point\n```\n\n### Backend Options\n\n#### Node.js Backend\n```\nserver/\n├── index.ts            # Express server setup\n├── routes.ts           # API route handlers\n├── storage.ts          # Data storage interface\n└── vite.ts            # Vite integration\n```\n\n#### Python Backend\n```\nserver_python/\n├── app.py             # Flask application\n├── storage.py         # Storage implementations\n└── requirements.txt   # Python dependencies\n```\n\n## Development Workflow\n\n### 1. Frontend Development\n```bash\n# Start with hot reload\nnpm run dev\n\n# The Vite dev server will:\n# - Serve React app on http://localhost:5000\n# - Proxy API requests to backend\n# - Hot reload on file changes\n# - Show runtime errors in browser\n```\n\n### 2. Backend Development\n\n#### Node.js\n- Edit files in `server/` directory\n- Server auto-restarts on changes (nodemon)\n- TypeScript compilation happens automatically\n\n#### Python\n- Edit files in `server_python/` directory\n- Restart server manually: `python3 run_python.py`\n- Flask debug mode enabled in development\n\n### 3. Database Development\nCurrently using in-memory storage for development. To add persistent storage:\n\n#### Node.js + PostgreSQL\n```bash\n# Already configured with Drizzle ORM\nnpm run db:push  # Push schema changes\n```\n\n#### Python + SQLAlchemy\n```python\n# Add to server_python/models.py\nfrom sqlalchemy import create_engine, Column, Integer, String\n# Define your models\n```\n\n## Adding New Features\n\n### 1. New Frontend Component\n```bash\n# Create component file\ntouch client/src/components/new-section.tsx\n```\n\n```tsx\n// client/src/components/new-section.tsx\nimport { motion } from \"framer-motion\";\nimport { useIntersectionObserver } from \"@/hooks/use-intersection-observer\";\n\nexport function NewSection() {\n  const { ref, isIntersecting } = useIntersectionObserver();\n  \n  return (\n    <section ref={ref} className=\"py-20\">\n      <motion.div\n        initial={{ opacity: 0, y: 50 }}\n        animate={isIntersecting ? { opacity: 1, y: 0 } : {}}\n        transition={{ duration: 0.6 }}\n      >\n        {/* Your content */}\n      </motion.div>\n    </section>\n  );\n}\n```\n\n### 2. New API Endpoint\n\n#### Node.js\n```typescript\n// server/routes.ts\napp.get('/api/new-endpoint', async (req, res) => {\n  try {\n    const data = await storage.getData();\n    res.json({ success: true, data });\n  } catch (error) {\n    res.status(500).json({ error: 'Internal server error' });\n  }\n});\n```\n\n#### Python\n```python\n# server_python/app.py\n@app.route('/api/new-endpoint', methods=['GET'])\ndef new_endpoint():\n    try:\n        data = storage.get_data()\n        return jsonify({'success': True, 'data': data})\n    except Exception as e:\n        return jsonify({'error': str(e)}), 500\n```\n\n### 3. New Animation\n```tsx\n// Using Framer Motion\n<motion.div\n  initial={{ scale: 0, rotate: -180 }}\n  animate={{ scale: 1, rotate: 0 }}\n  transition={{ \n    type: \"spring\",\n    stiffness: 260,\n    damping: 20 \n  }}\n>\n  Content\n</motion.div>\n```\n\n## Styling Guidelines\n\n### Tailwind CSS Classes\n```tsx\n// Consistent spacing\nclassName=\"py-20 px-4\"          // Section padding\nclassName=\"mb-8\"                // Component margins\nclassName=\"space-y-6\"           // Child spacing\n\n// Colors (follow design system)\nclassName=\"text-gray-900 dark:text-white\"           // Text\nclassName=\"bg-white dark:bg-slate-800\"              // Backgrounds\nclassName=\"border-gray-200 dark:border-slate-700\"   // Borders\n\n// Responsive design\nclassName=\"grid md:grid-cols-2 lg:grid-cols-3\"      // Responsive grids\nclassName=\"text-base md:text-lg lg:text-xl\"         // Responsive text\n```\n\n### Custom CSS Variables\n```css\n/* client/src/index.css */\n:root {\n  --section-padding: 5rem 0;\n  --card-radius: 1rem;\n  --transition-speed: 0.3s;\n}\n\n.dark {\n  --primary: 210 40% 98%;\n  --background: 222.2 84% 4.9%;\n}\n```\n\n## Performance Optimization\n\n### 1. Bundle Analysis\n```bash\nnpm run build\n# Check dist/ folder size\n```\n\n### 2. Image Optimization\n- Use WebP format when possible\n- Implement lazy loading for images\n- Use appropriate image sizes\n\n### 3. Code Splitting\n```tsx\n// Lazy load components\nconst LazyComponent = lazy(() => import('./HeavyComponent'));\n\nfunction App() {\n  return (\n    <Suspense fallback={<div>Loading...</div>}>\n      <LazyComponent />\n    </Suspense>\n  );\n}\n```\n\n## Testing\n\n### Frontend Testing\n```bash\n# Install testing dependencies\nnpm install --save-dev @testing-library/react @testing-library/jest-dom vitest\n\n# Create test file\n# client/src/components/__tests__/HeroSection.test.tsx\n```\n\n### Backend Testing\n```bash\n# Node.js testing\nnpm install --save-dev supertest jest @types/jest\n\n# Python testing\npip install pytest pytest-flask\n```\n\n## Debugging\n\n### Frontend Debugging\n- Use React DevTools browser extension\n- Console.log in components\n- Inspect network requests in DevTools\n\n### Backend Debugging\n\n#### Node.js\n```typescript\n// Add debug logging\nconsole.log('Debug info:', data);\n```\n\n#### Python\n```python\n# Add debug logging\nimport logging\nlogging.basicConfig(level=logging.DEBUG)\nlogger = logging.getLogger(__name__)\nlogger.debug('Debug info: %s', data)\n```\n\n## Common Development Tasks\n\n### Update Dependencies\n```bash\n# Node.js\nnpm update\nnpm audit fix\n\n# Python\npip install --upgrade -r server_python/requirements.txt\n```\n\n### Format Code\n```bash\n# Install Prettier\nnpm install --save-dev prettier\n\n# Format all files\nnpx prettier --write \"**/*.{js,jsx,ts,tsx,json,md}\"\n```\n\n### Environment Variables\n```bash\n# Create .env file\necho \"NODE_ENV=development\" > .env\necho \"PORT=5000\" >> .env\necho \"DATABASE_URL=your_database_url\" >> .env\n```\n\n## Deployment Preparation\n\n### 1. Build Optimization\n```bash\nnpm run build\n# Check build output in dist/\n```\n\n### 2. Environment Configuration\n- Set NODE_ENV=production\n- Configure proper database URLs\n- Set up environment variables\n\n### 3. Performance Testing\n- Test with production build\n- Check Core Web Vitals\n- Verify mobile responsiveness\n\n---\n\nHappy coding! 🚀","size_bytes":6920},"QUICK_START.md":{"content":"# 🚀 Quick Start Guide\n\nGet the portfolio running in **under 2 minutes**!\n\n## Prerequisites\n- Node.js 18+ installed\n- Python 3.11+ (optional, for Python backend)\n\n## Fastest Setup (Node.js Backend)\n\n```bash\n# 1. Clone and navigate\ngit clone <repository-url>\ncd portfolio-website\n\n# 2. Install dependencies\nnpm install\n\n# 3. Start development server\nnpm run dev\n```\n\n**Done!** Open `http://localhost:5000` in your browser.\n\n## Alternative Setup (Python Backend)\n\n```bash\n# 1-2. Same as above\nnpm install\n\n# 3. Install Python dependencies\npip install flask flask-cors pydantic python-dotenv\n\n# 4. Start Python server\npython3 run_python.py\n```\n\n## Quick Commands\n\n| Command | Purpose |\n|---------|---------|\n| `npm run dev` | Start Node.js server |\n| `python3 run_python.py` | Start Python server |\n| `npm run build` | Build for production |\n\n## Troubleshooting\n\n**Port 5000 busy?**\n```bash\nPORT=3000 npm run dev\n```\n\n**Dependencies not installing?**\n```bash\nnpm cache clean --force\nnpm install\n```\n\nThat's it! Your portfolio is now running locally. 🎉","size_bytes":1053},"README.md":{"content":"# Vansh Sharma - Data Science Portfolio\n\nA modern, interactive portfolio website showcasing data science expertise, projects, and achievements. Features stunning animations, interactive visualizations, and a professional presentation of skills and experience.\n\n## 🚀 Features\n\n- **Interactive Animations**: Smooth transitions, floating particles, and engaging hover effects\n- **Data Science Visualizations**: Real-time charts, ML pipeline flows, and interactive metrics\n- **Resume Download**: Professional resume download with smart error handling\n- **Dual Backend Support**: Choose between Node.js (TypeScript) or Python (Flask)\n- **Responsive Design**: Works perfectly on desktop, tablet, and mobile devices\n- **Dark/Light Theme**: Automatic theme switching with smooth transitions\n- **Contact Form**: Working contact form with validation and message storage\n- **Performance Optimized**: Fast loading with modern web technologies\n\n## 🛠️ Tech Stack\n\n### Frontend\n- **React 18** with TypeScript\n- **Tailwind CSS** for styling\n- **Framer Motion** for animations\n- **shadcn/ui** component library\n- **Vite** for development and building\n\n### Backend Options\n- **Option 1**: Node.js + Express + TypeScript\n- **Option 2**: Python + Flask + Pydantic\n\n## 📋 Prerequisites\n\nBefore running this project, make sure you have:\n\n- **Node.js 18+** and **npm** installed\n- **Python 3.11+** (if using Python backend)\n- **Git** for cloning the repository\n\n## 🔧 Installation & Setup\n\n### 1. Clone the Repository\n\n```bash\ngit clone <repository-url>\ncd portfolio-website\n```\n\n### 2. Add Your Resume (Important!)\n\nPlace your resume as `Vansh_Sharma_Resume.pdf` in `client/public/assets/documents/` folder.\nSee [RESUME_SETUP.md](RESUME_SETUP.md) for detailed instructions.\n\n### 3. Install Dependencies\n\n#### For Node.js Backend (Recommended)\n```bash\n# Install all Node.js dependencies\nnpm install\n```\n\n#### For Python Backend (Alternative)\n```bash\n# Install Node.js dependencies (needed for frontend)\nnpm install\n\n# Install Python dependencies\npip install flask flask-cors pydantic python-dotenv typing-extensions\n# OR using the requirements file\npip install -r server_python/requirements.txt\n```\n\n### 4. Build the Frontend (Production)\n\n```bash\n# Build the React frontend for production\nnpm run build\n```\n\n## 🚀 Running the Application\n\n### Option 1: Node.js Backend (Default)\n\n```bash\n# Start the development server\nnpm run dev\n```\n\nThe application will be available at: `http://localhost:5000`\n\n### Option 2: Python Backend\n\n```bash\n# Start the Python Flask server\npython3 run_python.py\n```\n\nThe application will be available at: `http://localhost:5000`\n\n## 🌐 Development vs Production\n\n### Development Mode\n- Hot reload enabled\n- Debug logging\n- Source maps available\n- Dev server with proxy\n\n### Production Mode\n```bash\n# Build for production\nnpm run build\n\n# Start Node.js production server\nnpm run start\n\n# OR start Python production server\nNODE_ENV=production python3 run_python.py\n```\n\n## 📁 Project Structure\n\n```\nportfolio-website/\n├── client/                     # React frontend\n│   ├── public/\n│   │   └── assets/\n│   │       └── documents/      # 📄 Put your resume here!\n│   │           └── Vansh_Sharma_Resume.pdf\n│   ├── src/\n│   │   ├── components/        # React components\n│   │   ├── pages/            # Page components\n│   │   ├── hooks/            # Custom React hooks\n│   │   ├── lib/              # Utility functions\n│   │   └── main.tsx          # App entry point\n│   └── index.html            # HTML template\n├── server/                    # Node.js backend\n│   ├── index.ts              # Express server\n│   ├── routes.ts             # API routes\n│   └── storage.ts            # Data storage\n├── server_python/             # Python backend\n│   ├── app.py                # Flask server\n│   ├── storage.py            # Data storage\n│   └── requirements.txt      # Python dependencies\n├── shared/                    # Shared types/schemas\n│   └── schema.ts             # Data models\n├── run_python.py             # Python server launcher\n├── package.json              # Node.js dependencies\n├── tailwind.config.ts        # Tailwind configuration\n├── vite.config.ts            # Vite configuration\n└── README.md                 # This file\n```\n\n## 🔌 API Endpoints\n\nBoth backends provide identical REST API endpoints:\n\n| Endpoint | Method | Description |\n|----------|--------|-------------|\n| `/api/health` | GET | Health check |\n| `/api/contact` | POST | Submit contact form |\n| `/api/contact` | GET | Get all messages (admin) |\n| `/api/stats` | GET | Portfolio statistics |\n\n### Example API Usage\n\n```bash\n# Health check\ncurl http://localhost:5000/api/health\n\n# Submit contact form\ncurl -X POST http://localhost:5000/api/contact \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"name\": \"John Doe\",\n    \"email\": \"john@example.com\",\n    \"message\": \"Great portfolio!\"\n  }'\n```\n\n## 🎨 Customization\n\n### Changing Colors\nEdit `client/src/index.css` to modify the color scheme:\n\n```css\n:root {\n  --primary: 222.2 84% 4.9%;\n  --primary-foreground: 210 40% 98%;\n  /* Add your custom colors */\n}\n```\n\n### Adding New Sections\n1. Create a new component in `client/src/components/`\n2. Add it to `client/src/pages/home.tsx`\n3. Update navigation if needed\n\n### Modifying Backend\n- **Node.js**: Edit files in `server/` directory\n- **Python**: Edit files in `server_python/` directory\n\n## 🐛 Troubleshooting\n\n### Common Issues\n\n#### Port Already in Use\n```bash\n# Kill process using port 5000\nlsof -ti:5000 | xargs kill -9\n\n# Or use a different port\nPORT=3000 npm run dev\nPORT=3000 python3 run_python.py\n```\n\n#### Dependencies Issues\n```bash\n# Clear npm cache\nnpm cache clean --force\nrm -rf node_modules\nnpm install\n\n# Clear Python cache\npip cache purge\npip install --force-reinstall -r server_python/requirements.txt\n```\n\n#### Build Issues\n```bash\n# Clean build\nrm -rf client/dist\nnpm run build\n```\n\n### Performance Issues\n- Make sure you're running in production mode for better performance\n- Check browser dev tools for any console errors\n- Ensure all dependencies are up to date\n\n## 🚢 Deployment\n\n### Replit (Recommended)\n1. Import this repository to Replit\n2. Run `npm install` in the shell\n3. Start with `npm run dev` or `python3 run_python.py`\n\n### Vercel (Node.js only)\n```bash\nnpm install -g vercel\nvercel\n```\n\n### Heroku (Python)\n```bash\n# Add these files for Heroku deployment\necho \"web: python3 run_python.py\" > Procfile\necho \"python-3.11.*\" > runtime.txt\n\ngit add .\ngit commit -m \"Deploy to Heroku\"\nheroku create your-app-name\ngit push heroku main\n```\n\n### Railway\n1. Connect your GitHub repository\n2. Railway will auto-detect and deploy\n\n## 📝 Environment Variables\n\nCreate a `.env` file for environment-specific settings:\n\n```env\n# Server configuration\nPORT=5000\nNODE_ENV=development\n\n# Database (if using)\nDATABASE_URL=your_database_url\n\n# API Keys (if needed)\nEMAIL_API_KEY=your_email_api_key\n```\n\n## 🤝 Contributing\n\n1. Fork the repository\n2. Create a feature branch: `git checkout -b feature-name`\n3. Make your changes\n4. Commit: `git commit -m \"Add feature\"`\n5. Push: `git push origin feature-name`\n6. Open a Pull Request\n\n## 📄 License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n## 👨‍💻 Author\n\n**Vansh Sharma**\n- Email: [your-email@example.com]\n- LinkedIn: [Your LinkedIn Profile]\n- GitHub: [Your GitHub Profile]\n\n## 🙏 Acknowledgments\n\n- [React](https://reactjs.org/) for the frontend framework\n- [Tailwind CSS](https://tailwindcss.com/) for styling\n- [Framer Motion](https://www.framer.com/motion/) for animations\n- [shadcn/ui](https://ui.shadcn.com/) for UI components\n- [Flask](https://flask.palletsprojects.com/) for Python backend\n- [Express.js](https://expressjs.com/) for Node.js backend\n\n---\n\n## 📞 Support\n\nIf you encounter any issues or have questions:\n\n1. Check the [Troubleshooting](#-troubleshooting) section\n2. Review the API documentation above\n3. Check browser console for errors\n4. Ensure all dependencies are installed correctly\n\nFor additional help, please open an issue in the repository.\n\n---\n\n**Built with ❤️ using modern web technologies**","size_bytes":8397},"README_BACKEND.md":{"content":"# Backend Options for Vansh Sharma's Portfolio\n\nThis portfolio supports both **Node.js (TypeScript)** and **Python (Flask)** backends. Both provide identical functionality and API endpoints.\n\n## Quick Start\n\n### Option 1: Node.js Backend (Default)\n```bash\nnpm run dev\n```\n\n### Option 2: Python Backend\n```bash\npython3 run_python.py\n```\n\n## Backend Comparison\n\n| Feature | Node.js (TypeScript) | Python (Flask) |\n|---------|---------------------|----------------|\n| **Runtime** | Node.js + Express | Python + Flask |\n| **Language** | TypeScript | Python 3.11+ |\n| **Performance** | High (V8 Engine) | Good (Python) |\n| **Development** | Hot reload via Vite | Flask debug mode |\n| **Dependencies** | npm packages | pip packages |\n| **Deployment** | Replit, Vercel, Netlify | Replit, Heroku, Railway |\n\n## API Endpoints\n\nBoth backends provide identical REST API endpoints:\n\n### Health Check\n```http\nGET /api/health\n```\n\n### Contact Form\n```http\nPOST /api/contact\nContent-Type: application/json\n\n{\n  \"name\": \"John Doe\",\n  \"email\": \"john@example.com\", \n  \"message\": \"Your message here\"\n}\n```\n\n### Get Messages (Admin)\n```http\nGET /api/contact\n```\n\n### Portfolio Stats\n```http\nGET /api/stats\n```\n\n## File Structure\n\n```\nproject/\n├── server/                 # Node.js backend\n│   ├── index.ts           # Express server\n│   ├── routes.ts          # API routes\n│   ├── storage.ts         # Data storage\n│   └── vite.ts            # Vite integration\n├── server_python/         # Python backend  \n│   ├── app.py             # Flask server\n│   ├── storage.py         # Data storage\n│   └── requirements.txt   # Python dependencies\n├── run_python.py          # Python server launcher\n└── client/                # React frontend\n```\n\n## Development Features\n\n### Node.js Backend\n- ✅ Hot module replacement via Vite\n- ✅ TypeScript with strict typing\n- ✅ Integrated development server\n- ✅ Built-in static file serving\n- ✅ Session management ready\n\n### Python Backend  \n- ✅ Flask development server\n- ✅ Pydantic data validation\n- ✅ CORS support\n- ✅ Request/response logging\n- ✅ Error handling\n- ✅ Memory/file storage options\n\n## Storage Options\n\nBoth backends support multiple storage methods:\n\n1. **Memory Storage** (Development)\n   - Fast in-memory data storage\n   - Data resets on server restart\n   - Includes sample data\n\n2. **File Storage** (Development/Production)\n   - Persistent JSON file storage  \n   - Automatic file creation\n   - Data survives server restarts\n\n3. **Database Storage** (Production Ready)\n   - PostgreSQL via Drizzle ORM (Node.js)\n   - SQLAlchemy ready (Python)\n\n## Switching Backends\n\nTo switch from Node.js to Python backend:\n\n1. **Stop the current server** (Ctrl+C)\n\n2. **Start Python server:**\n   ```bash\n   python3 run_python.py\n   ```\n\n3. **Verify the switch:**\n   ```bash\n   curl http://localhost:5000/api/health\n   ```\n\nThe frontend will automatically work with either backend since they provide identical APIs.\n\n## Production Deployment\n\n### Node.js Deployment\n```bash\nnpm run build\nnpm run start\n```\n\n### Python Deployment\n```bash\n# Install dependencies\npip install -r server_python/requirements.txt\n\n# Run production server\npython3 run_python.py\n```\n\n## Environment Variables\n\nBoth backends support:\n- `PORT` - Server port (default: 5000)\n- `NODE_ENV` - Environment mode (development/production)\n\n## Validation & Error Handling\n\n### Node.js\n- Zod schema validation\n- TypeScript compile-time checks\n- Express error middleware\n\n### Python\n- Pydantic model validation\n- Type hints with mypy support\n- Flask error handlers\n\n## Performance Notes\n\n- **Node.js**: Better for high-concurrency scenarios\n- **Python**: Better for data science integrations\n- **Both**: Suitable for portfolio websites with moderate traffic\n\nChoose the backend that best fits your deployment environment and team expertise!","size_bytes":3917},"RESUME_SETUP.md":{"content":"# 📄 Resume Setup Guide\n\n## Quick Setup\n\n1. **Save your resume as**: `Vansh_Sharma_Resume.pdf`\n2. **Place it in**: `client/public/assets/documents/`\n3. **Done!** The download button will work automatically.\n\n## Detailed Instructions\n\n### Step 1: Prepare Your Resume\n- Format: PDF only\n- Filename: `Vansh_Sharma_Resume.pdf` (exact, case-sensitive)\n- Size: Under 5MB recommended\n- Content: Make sure it's your latest version\n\n### Step 2: Add to Project\n```bash\n# Navigate to your project folder\ncd your-portfolio-project\n\n# Place your resume in the correct location\n# Copy your resume file to: client/public/assets/documents/Vansh_Sharma_Resume.pdf\n```\n\n### Step 3: Test the Download\n1. Start your server: `npm run dev` or `python3 run_python.py`\n2. Go to your portfolio website\n3. Click the \"Download Resume\" button in the hero section\n4. Your resume should download with a success toast notification\n\n## Alternative Methods\n\n### Method 1: External Hosting (Google Drive, Dropbox)\nIf you prefer to host your resume externally:\n\n1. Upload your resume to Google Drive, Dropbox, or similar\n2. Get a direct download link\n3. Edit `client/src/components/hero-section.tsx`\n4. Update the `link.href` in the `downloadResume` function:\n\n```javascript\nconst downloadResume = () => {\n  const link = document.createElement('a');\n  link.href = 'https://your-external-link.com/resume.pdf';\n  link.download = 'Vansh_Sharma_Resume.pdf';\n  link.target = '_blank';\n  link.click();\n  \n  toast({\n    title: \"Resume Downloaded\",\n    description: \"Vansh Sharma's resume has been downloaded successfully.\",\n  });\n};\n```\n\n### Method 2: Multiple Resume Versions\nTo offer different resume versions (general, tech-focused, etc.):\n\n1. Create multiple resume files:\n   - `Vansh_Sharma_Resume_General.pdf`\n   - `Vansh_Sharma_Resume_Tech.pdf`\n   - `Vansh_Sharma_Resume_DataScience.pdf`\n\n2. Add dropdown selection in the hero section:\n```tsx\nconst [resumeType, setResumeType] = useState('general');\n\nconst downloadResume = (type = resumeType) => {\n  const link = document.createElement('a');\n  link.href = `/assets/documents/Vansh_Sharma_Resume_${type}.pdf`;\n  link.download = `Vansh_Sharma_Resume_${type}.pdf`;\n  // ... rest of the function\n};\n```\n\n## User Experience Features\n\nThe download button includes:\n- ✅ **File existence check** - Verifies resume exists before download\n- ✅ **Success notification** - Toast message confirms successful download\n- ✅ **Error handling** - Friendly messages if file is unavailable\n- ✅ **Automatic download** - No need to right-click and save\n- ✅ **Professional filename** - Downloads with proper name\n\n## Troubleshooting\n\n### \"Resume Unavailable\" Message\n**Cause**: Resume file not found\n**Solution**: \n- Check filename is exactly `Vansh_Sharma_Resume.pdf`\n- Verify file is in `client/public/assets/documents/`\n- Restart your development server\n\n### Download Doesn't Start\n**Cause**: Browser blocking download or file path issue\n**Solution**:\n- Check browser popup blocker settings\n- Try in incognito/private browsing mode\n- Verify file permissions (should be readable)\n\n### Wrong File Downloads\n**Cause**: Browser cache or old file\n**Solution**:\n- Clear browser cache\n- Hard refresh (Ctrl+F5 or Cmd+Shift+R)\n- Replace the old resume file completely\n\n## File Structure\n```\nyour-portfolio/\n├── client/\n│   ├── public/\n│   │   └── assets/\n│   │       └── documents/\n│   │           ├── README.md\n│   │           └── Vansh_Sharma_Resume.pdf  ← Your resume goes here\n│   └── src/\n│       └── components/\n│           └── hero-section.tsx  ← Contains download logic\n└── README.md\n```\n\n## Security Notes\n- Resume files are publicly accessible (anyone with the link can download)\n- Don't include sensitive personal information like full address or SSN\n- Keep multiple versions if you need different levels of detail\n- Regular updates ensure the latest version is always available\n\n## Next Steps\nAfter adding your resume:\n1. Test the download functionality\n2. Share your portfolio link with confidence\n3. Update your resume regularly by replacing the file\n4. Consider adding a \"Last Updated\" date to your resume\n\nYour portfolio visitors can now easily download your resume with a professional, smooth experience!","size_bytes":4307},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"flask>=3.1.1\",\n    \"flask-cors>=6.0.1\",\n    \"pydantic>=2.11.7\",\n    \"python-dotenv>=1.1.1\",\n    \"typing-extensions>=4.14.1\",\n]\n","size_bytes":274},"replit.md":{"content":"# Overview\n\nThis is a personal portfolio website for Vansh Sharma, a Data Science enthusiast and undergraduate student. The application showcases his skills, projects, education, and certifications in data science, machine learning, GIS analysis, and blockchain development. The portfolio is built as a full-stack web application with a modern React frontend and dual backend options (Node.js/TypeScript and Python/Flask), featuring contact form functionality, interactive animations, and responsive design.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# Recent Changes (August 2025)\n\n## Backend Conversion (August 12, 2025)\n- Successfully converted from Node.js-only backend to dual backend support\n- Added complete Python Flask backend with identical API functionality\n- Created comprehensive documentation for both backend options\n- All frontend components remain compatible with both backends\n\n## Enhanced Portfolio Features\n- Added interactive data science visualizations with animated charts\n- Implemented celebration confetti effects for achievements\n- Created enhanced skills section with floating particles and gradient animations\n- Replaced static about section image with interactive data science ecosystem\n- Added ML pipeline flow visualization with animated process steps\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React 18 with TypeScript and Vite for development\n- **Styling**: Tailwind CSS with shadcn/ui component library for consistent design\n- **UI Components**: Radix UI primitives for accessible, unstyled components\n- **Animations**: Framer Motion for smooth page transitions and interactions\n- **State Management**: React Query (TanStack Query) for server state management\n- **Form Handling**: React Hook Form with Zod validation for type-safe forms\n- **Routing**: Wouter for lightweight client-side routing\n- **Theme Support**: Custom theme provider with dark/light mode switching\n\n## Backend Architecture\n- **Dual Backend Support**: Node.js (TypeScript) and Python (Flask) options\n- **Node.js Backend**: Express.js with TypeScript, Vite integration, hot reload\n- **Python Backend**: Flask with Pydantic validation, CORS support, request logging\n- **API Design**: RESTful endpoints for contact form submission and message retrieval\n- **Development Server**: Vite integration (Node.js) or Flask dev server (Python)\n- **Request Logging**: Custom middleware for API request/response logging\n- **Error Handling**: Centralized error handling with structured error responses\n- **Storage**: Memory/file storage options for both backends\n\n## Data Storage Solutions\n- **Database**: PostgreSQL configured via Drizzle ORM\n- **Schema Management**: Drizzle Kit for database migrations and schema changes\n- **Development Storage**: In-memory storage implementation for local development\n- **Connection**: Neon Database serverless PostgreSQL for production\n- **Type Safety**: Drizzle-Zod integration for runtime schema validation\n\n## Authentication and Authorization\n- **Current State**: No authentication system implemented\n- **Contact Storage**: Simple contact message collection without user accounts\n- **Admin Access**: Basic endpoint for retrieving all contact messages (no protection currently)\n\n## External Dependencies\n\n### Core Technologies\n- **Database**: Neon Database (serverless PostgreSQL)\n- **Hosting Platform**: Replit with custom development banner integration\n- **Email Service**: Currently using simple form submission (no email service integrated)\n\n### Development Tools\n- **Build Tool**: Vite with React plugin and TypeScript support\n- **Code Quality**: TypeScript strict mode with comprehensive type checking\n- **Asset Management**: Static asset serving through Vite in development\n- **Hot Reload**: Vite HMR with runtime error overlay for development\n\n### UI and Animation Libraries\n- **Component Library**: shadcn/ui built on Radix UI primitives\n- **Icons**: Lucide React for consistent iconography\n- **Fonts**: Google Fonts (Inter) for typography\n- **Animation**: Framer Motion for page transitions and scroll-triggered animations\n- **Responsive Design**: Tailwind CSS with mobile-first approach\n\n### Form and Validation\n- **Form Management**: React Hook Form for performant form handling\n- **Schema Validation**: Zod for runtime type validation and form schemas\n- **Error Handling**: Integrated validation with user-friendly error messages\n\nThe application follows a modern full-stack architecture with strong type safety throughout, responsive design patterns, and smooth user interactions. The portfolio effectively showcases technical projects while maintaining professional presentation and functionality.","size_bytes":4702},"run_python.py":{"content":"#!/usr/bin/env python3\n\"\"\"\nMain entry point for the Python Flask server.\n\"\"\"\n\nimport os\nimport sys\nfrom pathlib import Path\n\n# Add the server_python directory to the Python path\nserver_path = Path(__file__).parent / 'server_python'\nsys.path.insert(0, str(server_path))\n\nif __name__ == '__main__':\n    # Import and run the Flask app\n    try:\n        from app import app\n    except ImportError as e:\n        print(f\"Error importing Flask app: {e}\")\n        print(\"Make sure all dependencies are installed: pip install flask flask-cors pydantic python-dotenv\")\n        sys.exit(1)\n    \n    # Set environment variables\n    os.environ.setdefault('NODE_ENV', 'development')\n    \n    # Configuration\n    port = int(os.environ.get('PORT', 5000))\n    debug = os.environ.get('NODE_ENV') == 'development'\n    \n    print(f\"🐍 Starting Python Flask server on port {port}\")\n    print(f\"Environment: {'development' if debug else 'production'}\")\n    print(f\"Access the portfolio at: http://localhost:{port}\")\n    \n    # Run the Flask app\n    app.run(\n        host='0.0.0.0',\n        port=port,\n        debug=debug,\n        threaded=True\n    )","size_bytes":1128},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"Inter\", \"ui-sans-serif\", \"system-ui\", \"-apple-system\", \"BlinkMacSystemFont\", \"Segoe UI\", \"Roboto\", \"Helvetica Neue\", \"Arial\", \"Noto Sans\", \"sans-serif\"],\n        serif: [\"ui-serif\", \"Georgia\", \"Cambria\", \"Times New Roman\", \"Times\", \"serif\"],\n        mono: [\"ui-monospace\", \"SFMono-Regular\", \"Menlo\", \"Monaco\", \"Consolas\", \"Liberation Mono\", \"Courier New\", \"monospace\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3042},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertContactMessageSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Contact form submission endpoint\n  app.post(\"/api/contact\", async (req, res) => {\n    try {\n      const validatedData = insertContactMessageSchema.parse(req.body);\n      const message = await storage.createContactMessage(validatedData);\n      \n      res.json({ \n        success: true, \n        message: \"Message sent successfully!\",\n        id: message.id \n      });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ \n          success: false, \n          message: \"Invalid form data\", \n          errors: error.errors \n        });\n      } else {\n        res.status(500).json({ \n          success: false, \n          message: \"Failed to send message\" \n        });\n      }\n    }\n  });\n\n  // Get all contact messages (for admin purposes)\n  app.get(\"/api/contact-messages\", async (req, res) => {\n    try {\n      const messages = await storage.getContactMessages();\n      res.json(messages);\n    } catch (error) {\n      res.status(500).json({ \n        success: false, \n        message: \"Failed to fetch messages\" \n      });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":1426},"server/storage.ts":{"content":"import { type User, type InsertUser, type ContactMessage, type InsertContactMessage } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  createContactMessage(message: InsertContactMessage): Promise<ContactMessage>;\n  getContactMessages(): Promise<ContactMessage[]>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private contactMessages: Map<string, ContactMessage>;\n\n  constructor() {\n    this.users = new Map();\n    this.contactMessages = new Map();\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async createContactMessage(insertMessage: InsertContactMessage): Promise<ContactMessage> {\n    const id = randomUUID();\n    const message: ContactMessage = { \n      ...insertMessage, \n      id,\n      createdAt: new Date()\n    };\n    this.contactMessages.set(id, message);\n    return message;\n  }\n\n  async getContactMessages(): Promise<ContactMessage[]> {\n    return Array.from(this.contactMessages.values()).sort(\n      (a, b) => b.createdAt.getTime() - a.createdAt.getTime()\n    );\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":1691},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"server_python/__init__.py":{"content":"# This file makes server_python a Python package","size_bytes":48},"server_python/app.py":{"content":"#!/usr/bin/env python3\n\"\"\"\nFlask backend server for Vansh Sharma's portfolio website.\nHandles contact form submissions and message retrieval.\n\"\"\"\n\nimport os\nimport json\nfrom datetime import datetime\nfrom typing import List, Dict, Any, Optional\nfrom flask import Flask, request, jsonify, send_from_directory\nfrom flask_cors import CORS\nfrom pydantic import BaseModel, ValidationError, field_validator\nimport logging\n\n# Configure logging\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\napp = Flask(__name__, static_folder='../client/dist', static_url_path='')\nCORS(app)\n\n# Ensure static folder path is valid\nif not app.static_folder or not os.path.exists(app.static_folder):\n    app.static_folder = None\n\n# Pydantic models for request validation\nclass ContactMessage(BaseModel):\n    name: str\n    email: str\n    message: str\n    created_at: Optional[str] = None\n    \n    @field_validator('name')\n    @classmethod\n    def validate_name(cls, v):\n        if not v or len(v.strip()) < 2:\n            raise ValueError('Name must be at least 2 characters long')\n        return v.strip()\n    \n    @field_validator('email')\n    @classmethod\n    def validate_email(cls, v):\n        import re\n        if not v or not re.match(r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$', v):\n            raise ValueError('Invalid email address')\n        return v.lower().strip()\n    \n    @field_validator('message')\n    @classmethod\n    def validate_message(cls, v):\n        if not v or len(v.strip()) < 10:\n            raise ValueError('Message must be at least 10 characters long')\n        return v.strip()\n\n# In-memory storage for development\nclass MemoryStorage:\n    def __init__(self):\n        self.messages: List[Dict[str, Any]] = []\n    \n    def add_message(self, message_data: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"Add a new contact message to storage.\"\"\"\n        message_data['id'] = len(self.messages) + 1\n        message_data['created_at'] = datetime.now().isoformat()\n        self.messages.append(message_data)\n        logger.info(f\"New message added: {message_data['name']} - {message_data['email']}\")\n        return message_data\n    \n    def get_all_messages(self) -> List[Dict[str, Any]]:\n        \"\"\"Retrieve all contact messages.\"\"\"\n        return sorted(self.messages, key=lambda x: x['created_at'], reverse=True)\n    \n    def get_message_count(self) -> int:\n        \"\"\"Get total number of messages.\"\"\"\n        return len(self.messages)\n\n# Initialize storage\nstorage = MemoryStorage()\n\n# Custom request logging middleware\n@app.before_request\ndef log_request():\n    if request.path.startswith('/api/'):\n        logger.info(f\"{request.method} {request.path} - {request.remote_addr}\")\n\n@app.after_request\ndef log_response(response):\n    if request.path.startswith('/api/'):\n        logger.info(f\"Response: {response.status_code} for {request.method} {request.path}\")\n    return response\n\n# API Routes\n@app.route('/api/health', methods=['GET'])\ndef health_check():\n    \"\"\"Health check endpoint.\"\"\"\n    return jsonify({\n        'status': 'healthy',\n        'message': 'Portfolio API is running',\n        'timestamp': datetime.now().isoformat(),\n        'total_messages': storage.get_message_count()\n    })\n\n@app.route('/api/contact', methods=['POST'])\ndef submit_contact():\n    \"\"\"Handle contact form submissions.\"\"\"\n    try:\n        # Get JSON data from request\n        data = request.get_json()\n        if not data:\n            return jsonify({'error': 'No data provided'}), 400\n        \n        # Validate using Pydantic\n        try:\n            message = ContactMessage(**data)\n        except ValidationError as e:\n            error_messages = []\n            for error in e.errors():\n                field = error['loc'][0] if error['loc'] else 'unknown'\n                error_messages.append(f\"{field}: {error['msg']}\")\n            return jsonify({\n                'error': 'Validation failed',\n                'details': error_messages\n            }), 400\n        \n        # Store the message\n        message_data = message.model_dump()\n        saved_message = storage.add_message(message_data)\n        \n        return jsonify({\n            'success': True,\n            'message': 'Message sent successfully!',\n            'data': {\n                'id': saved_message['id'],\n                'created_at': saved_message['created_at']\n            }\n        }), 201\n        \n    except Exception as e:\n        logger.error(f\"Error processing contact form: {str(e)}\")\n        return jsonify({\n            'error': 'Internal server error',\n            'message': 'Failed to process your message. Please try again.'\n        }), 500\n\n@app.route('/api/contact', methods=['GET'])\ndef get_contacts():\n    \"\"\"Retrieve all contact messages (admin endpoint).\"\"\"\n    try:\n        messages = storage.get_all_messages()\n        return jsonify({\n            'success': True,\n            'count': len(messages),\n            'messages': messages\n        })\n    except Exception as e:\n        logger.error(f\"Error retrieving messages: {str(e)}\")\n        return jsonify({\n            'error': 'Failed to retrieve messages'\n        }), 500\n\n@app.route('/api/stats', methods=['GET'])\ndef get_stats():\n    \"\"\"Get portfolio statistics.\"\"\"\n    return jsonify({\n        'total_messages': storage.get_message_count(),\n        'last_updated': datetime.now().isoformat(),\n        'server_status': 'running',\n        'backend_type': 'Python Flask'\n    })\n\n# Serve React app for all non-API routes\n@app.route('/')\ndef serve_index():\n    \"\"\"Serve the React app index.html.\"\"\"\n    if not app.static_folder:\n        return jsonify({\n            'error': 'Frontend not built',\n            'message': 'Please build the React frontend first'\n        }), 404\n    try:\n        return send_from_directory(app.static_folder, 'index.html')\n    except FileNotFoundError:\n        return jsonify({\n            'error': 'Frontend not built',\n            'message': 'Please build the React frontend first'\n        }), 404\n\n@app.route('/<path:path>')\ndef serve_static_files(path):\n    \"\"\"Serve static files or fallback to index.html for client-side routing.\"\"\"\n    if not app.static_folder:\n        return jsonify({\n            'error': 'Frontend not built',\n            'message': 'Please build the React frontend first'\n        }), 404\n    try:\n        return send_from_directory(app.static_folder, path)\n    except FileNotFoundError:\n        # Fallback to index.html for client-side routing\n        return send_from_directory(app.static_folder, 'index.html')\n\n# Error handlers\n@app.errorhandler(404)\ndef not_found(error):\n    if request.path.startswith('/api/'):\n        return jsonify({'error': 'API endpoint not found'}), 404\n    return serve_index()\n\n@app.errorhandler(500)\ndef internal_error(error):\n    logger.error(f\"Internal server error: {str(error)}\")\n    return jsonify({'error': 'Internal server error'}), 500\n\n@app.errorhandler(405)\ndef method_not_allowed(error):\n    return jsonify({'error': 'Method not allowed'}), 405\n\nif __name__ == '__main__':\n    # Configuration\n    port = int(os.environ.get('PORT', 5000))\n    debug = os.environ.get('NODE_ENV', 'production') == 'development'\n    \n    logger.info(f\"Starting Flask server on port {port}\")\n    logger.info(f\"Environment: {'development' if debug else 'production'}\")\n    logger.info(f\"Static files: {app.static_folder}\")\n    \n    # Run the Flask app\n    app.run(\n        host='0.0.0.0',\n        port=port,\n        debug=debug,\n        threaded=True\n    )","size_bytes":7511},"server_python/storage.py":{"content":"\"\"\"\nStorage abstraction layer for the portfolio backend.\nSupports both in-memory storage (development) and database storage (production).\n\"\"\"\n\nfrom abc import ABC, abstractmethod\nfrom typing import List, Dict, Any, Optional\nfrom datetime import datetime\nimport json\nimport os\n\n\nclass StorageInterface(ABC):\n    \"\"\"Abstract base class for storage implementations.\"\"\"\n    \n    @abstractmethod\n    def add_message(self, message_data: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"Add a new contact message.\"\"\"\n        pass\n    \n    @abstractmethod\n    def get_all_messages(self) -> List[Dict[str, Any]]:\n        \"\"\"Retrieve all contact messages.\"\"\"\n        pass\n    \n    @abstractmethod\n    def get_message_count(self) -> int:\n        \"\"\"Get total number of messages.\"\"\"\n        pass\n\n\nclass MemoryStorage(StorageInterface):\n    \"\"\"In-memory storage implementation for development.\"\"\"\n    \n    def __init__(self):\n        self.messages: List[Dict[str, Any]] = []\n        self._load_sample_data()\n    \n    def _load_sample_data(self):\n        \"\"\"Load some sample data for development.\"\"\"\n        sample_messages = [\n            {\n                'id': 1,\n                'name': 'John Doe',\n                'email': 'john@example.com',\n                'message': 'Great portfolio! I would like to discuss a data science project.',\n                'created_at': '2024-01-15T10:30:00'\n            },\n            {\n                'id': 2,\n                'name': 'Sarah Smith',\n                'email': 'sarah@company.com',\n                'message': 'Impressive GIS work. Are you available for consulting?',\n                'created_at': '2024-01-20T14:45:00'\n            }\n        ]\n        self.messages.extend(sample_messages)\n    \n    def add_message(self, message_data: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"Add a new contact message to memory.\"\"\"\n        message_data['id'] = len(self.messages) + 1\n        message_data['created_at'] = datetime.now().isoformat()\n        self.messages.append(message_data.copy())\n        return message_data\n    \n    def get_all_messages(self) -> List[Dict[str, Any]]:\n        \"\"\"Retrieve all contact messages.\"\"\"\n        return sorted(self.messages, key=lambda x: x['created_at'], reverse=True)\n    \n    def get_message_count(self) -> int:\n        \"\"\"Get total number of messages.\"\"\"\n        return len(self.messages)\n\n\nclass FileStorage(StorageInterface):\n    \"\"\"File-based storage implementation.\"\"\"\n    \n    def __init__(self, file_path: str = 'messages.json'):\n        self.file_path = file_path\n        self.messages = self._load_from_file()\n    \n    def _load_from_file(self) -> List[Dict[str, Any]]:\n        \"\"\"Load messages from JSON file.\"\"\"\n        if os.path.exists(self.file_path):\n            try:\n                with open(self.file_path, 'r', encoding='utf-8') as f:\n                    return json.load(f)\n            except (json.JSONDecodeError, IOError):\n                return []\n        return []\n    \n    def _save_to_file(self):\n        \"\"\"Save messages to JSON file.\"\"\"\n        try:\n            with open(self.file_path, 'w', encoding='utf-8') as f:\n                json.dump(self.messages, f, indent=2, ensure_ascii=False)\n        except IOError as e:\n            raise Exception(f\"Failed to save messages: {str(e)}\")\n    \n    def add_message(self, message_data: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"Add a new contact message to file.\"\"\"\n        message_data['id'] = len(self.messages) + 1\n        message_data['created_at'] = datetime.now().isoformat()\n        self.messages.append(message_data.copy())\n        self._save_to_file()\n        return message_data\n    \n    def get_all_messages(self) -> List[Dict[str, Any]]:\n        \"\"\"Retrieve all contact messages.\"\"\"\n        return sorted(self.messages, key=lambda x: x['created_at'], reverse=True)\n    \n    def get_message_count(self) -> int:\n        \"\"\"Get total number of messages.\"\"\"\n        return len(self.messages)\n\n\ndef create_storage(storage_type: str = 'memory') -> StorageInterface:\n    \"\"\"Factory function to create storage instances.\"\"\"\n    if storage_type == 'memory':\n        return MemoryStorage()\n    elif storage_type == 'file':\n        return FileStorage()\n    else:\n        raise ValueError(f\"Unknown storage type: {storage_type}\")","size_bytes":4278},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const contactMessages = pgTable(\"contact_messages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull(),\n  subject: text(\"subject\").notNull(),\n  message: text(\"message\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport const insertContactMessageSchema = createInsertSchema(contactMessages).pick({\n  name: true,\n  email: true,\n  subject: true,\n  message: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertContactMessage = z.infer<typeof insertContactMessageSchema>;\nexport type ContactMessage = typeof contactMessages.$inferSelect;\n","size_bytes":1228},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/components/theme-provider\";\nimport Home from \"@/pages/home\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":813},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(210, 25%, 7.8431%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(210, 25%, 7.8431%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(210, 25%, 7.8431%);\n  --primary: hsl(217, 91%, 60%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(210, 40%, 96%);\n  --secondary-foreground: hsl(210, 25%, 7.8431%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(215, 16%, 47%);\n  --accent: hsl(210, 40%, 96%);\n  --accent-foreground: hsl(217, 91%, 60%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(214, 32%, 91%);\n  --input: hsl(214, 32%, 91%);\n  --ring: hsl(217, 91%, 60%);\n  --radius: 0.5rem;\n  \n  /* Portfolio specific colors */\n  --hero-bg: hsl(210, 20%, 98%);\n  --section-bg: hsl(0, 0%, 100%);\n  --section-alt-bg: hsl(210, 20%, 98%);\n  --text-primary: hsl(210, 25%, 7.8431%);\n  --text-secondary: hsl(215, 16%, 47%);\n  --blue-primary: hsl(217, 91%, 60%);\n  --blue-secondary: hsl(217, 91%, 70%);\n  --emerald-primary: hsl(160, 84%, 39%);\n  --amber-primary: hsl(43, 96%, 56%);\n  --purple-primary: hsl(262, 83%, 58%);\n}\n\n.dark {\n  --background: hsl(224, 71%, 4%);\n  --foreground: hsl(213, 31%, 91%);\n  --card: hsl(224, 71%, 4%);\n  --card-foreground: hsl(213, 31%, 91%);\n  --popover: hsl(224, 71%, 4%);\n  --popover-foreground: hsl(213, 31%, 91%);\n  --primary: hsl(217, 91%, 60%);\n  --primary-foreground: hsl(222, 84%, 5%);\n  --secondary: hsl(222, 84%, 5%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(223, 47%, 11%);\n  --muted-foreground: hsl(215, 16%, 57%);\n  --accent: hsl(216, 34%, 17%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 63%, 31%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(216, 34%, 17%);\n  --input: hsl(216, 34%, 17%);\n  --ring: hsl(217, 91%, 60%);\n  \n  /* Portfolio specific dark colors */\n  --hero-bg: hsl(224, 71%, 4%);\n  --section-bg: hsl(223, 47%, 11%);\n  --section-alt-bg: hsl(224, 71%, 4%);\n  --text-primary: hsl(213, 31%, 91%);\n  --text-secondary: hsl(215, 16%, 57%);\n  --blue-primary: hsl(217, 91%, 60%);\n  --blue-secondary: hsl(217, 91%, 70%);\n  --emerald-primary: hsl(160, 84%, 39%);\n  --amber-primary: hsl(43, 96%, 56%);\n  --purple-primary: hsl(262, 83%, 58%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  \n  html {\n    scroll-behavior: smooth;\n  }\n  \n  body {\n    @apply bg-background text-foreground font-sans antialiased;\n    font-family: 'Inter', sans-serif;\n  }\n}\n\n@layer components {\n  /* Button Components */\n  .btn-primary {\n    @apply bg-blue-600 hover:bg-blue-700 text-white font-medium py-3 px-6 rounded-lg transition-all duration-300 inline-flex items-center justify-center shadow-lg hover:shadow-xl transform hover:-translate-y-1 dark:bg-blue-600 dark:hover:bg-blue-700;\n  }\n  \n  .btn-secondary {\n    @apply bg-emerald-600 hover:bg-emerald-700 text-white font-medium py-3 px-6 rounded-lg transition-all duration-300 inline-flex items-center justify-center shadow-lg hover:shadow-xl transform hover:-translate-y-1 dark:bg-emerald-600 dark:hover:bg-emerald-700;\n  }\n  \n  .btn-outline {\n    @apply border-2 border-blue-600 text-blue-600 hover:bg-blue-600 hover:text-white font-medium py-3 px-6 rounded-lg transition-all duration-300 inline-flex items-center justify-center dark:border-blue-400 dark:text-blue-400 dark:hover:bg-blue-400 dark:hover:text-gray-900;\n  }\n\n  /* Section Titles */\n  .section-title {\n    @apply text-4xl md:text-5xl font-bold text-gray-900 dark:text-white mb-4;\n  }\n  \n  .section-subtitle {\n    @apply text-xl text-gray-600 dark:text-gray-400 max-w-2xl mx-auto;\n  }\n\n  /* Cards */\n  .glass-card {\n    @apply bg-white/80 dark:bg-slate-800/80 backdrop-blur-lg border border-white/20 dark:border-gray-700/20 rounded-xl shadow-lg hover:shadow-xl transition-all duration-300;\n  }\n\n  /* Form Inputs */\n  .form-input {\n    @apply w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white dark:bg-slate-700 text-gray-900 dark:text-gray-100 transition-all duration-300;\n  }\n\n  /* Skill Progress Bars */\n  .skill-bar {\n    @apply w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2 overflow-hidden;\n  }\n  \n  .skill-progress {\n    @apply h-full rounded-full transition-all duration-1000 ease-out;\n  }\n\n  /* Social Float Buttons */\n  .social-float {\n    @apply w-12 h-12 rounded-full flex items-center justify-center shadow-lg hover:shadow-xl transition-all duration-300 transform hover:-translate-y-2 hover:scale-110;\n  }\n\n  /* Navigation */\n  .nav-link {\n    @apply text-gray-600 hover:text-blue-600 dark:text-gray-300 dark:hover:text-blue-400 transition-colors duration-200 relative;\n  }\n  \n  .nav-link.active {\n    @apply text-blue-600 dark:text-blue-400;\n  }\n  \n  .nav-link.active::after {\n    content: '';\n    @apply absolute bottom-0 left-0 w-full h-0.5 bg-blue-600 dark:bg-blue-400;\n  }\n\n  /* Timeline */\n  .timeline {\n    @apply relative;\n  }\n  \n  .timeline::before {\n    content: '';\n    @apply absolute left-4 top-0 w-0.5 h-full bg-blue-500;\n  }\n\n  .timeline-item {\n    @apply relative pl-12 mb-8;\n  }\n\n  .timeline-marker {\n    @apply absolute left-0 w-8 h-8 bg-blue-500 rounded-full border-4 border-white dark:border-slate-900;\n  }\n\n  /* Project Cards */\n  .project-card {\n    @apply bg-white dark:bg-slate-800 rounded-xl shadow-lg hover:shadow-xl transition-all duration-300 transform hover:-translate-y-2 overflow-hidden;\n  }\n\n  .project-overlay {\n    @apply absolute inset-0 bg-black bg-opacity-50 flex items-center justify-center opacity-0 hover:opacity-100 transition-opacity duration-300;\n  }\n\n  /* Tech Tags */\n  .tech-tag {\n    @apply px-3 py-1 rounded-full text-xs font-medium;\n  }\n\n  /* Filter Buttons */\n  .filter-btn {\n    @apply px-4 py-2 rounded-lg font-medium transition-all duration-300;\n  }\n  \n  .filter-btn.active {\n    @apply bg-blue-600 text-white shadow-lg;\n  }\n  \n  .filter-btn:not(.active) {\n    @apply text-gray-600 dark:text-gray-400 hover:text-blue-600 dark:hover:text-blue-400;\n  }\n\n  /* Loading Animation */\n  .loading-spinner {\n    @apply animate-spin rounded-full h-16 w-16 border-b-4 border-blue-500;\n  }\n}\n\n@layer utilities {\n  /* Custom Animations */\n  .animate-float {\n    animation: float 6s ease-in-out infinite;\n  }\n  \n  .animate-typing {\n    animation: typing 3.5s steps(30, end), blink-caret 0.75s step-end infinite;\n  }\n  \n  .animate-slideInLeft {\n    animation: slideInLeft 0.8s ease-out forwards;\n  }\n  \n  .animate-slideInRight {\n    animation: slideInRight 0.8s ease-out forwards;\n  }\n  \n  .animate-fadeInUp {\n    animation: fadeInUp 0.8s ease-out forwards;\n  }\n  \n  .animate-pulse-slow {\n    animation: pulse 3s cubic-bezier(0.4, 0, 0.6, 1) infinite;\n  }\n}\n\n/* Keyframes */\n@keyframes float {\n  0%, 100% { transform: translateY(0px); }\n  50% { transform: translateY(-20px); }\n}\n\n@keyframes typing {\n  from { width: 0; }\n  to { width: 100%; }\n}\n\n@keyframes blink-caret {\n  from, to { border-color: transparent; }\n  50% { border-color: #3B82F6; }\n}\n\n@keyframes slideInLeft {\n  0% { transform: translateX(-100px); opacity: 0; }\n  100% { transform: translateX(0); opacity: 1; }\n}\n\n@keyframes slideInRight {\n  0% { transform: translateX(100px); opacity: 0; }\n  100% { transform: translateX(0); opacity: 1; }\n}\n\n@keyframes fadeInUp {\n  0% { transform: translateY(50px); opacity: 0; }\n  100% { transform: translateY(0); opacity: 1; }\n}\n\n/* Scroll Indicator */\n.progress-bar {\n  @apply fixed top-0 left-0 h-1 bg-blue-500 z-50 transition-all duration-300;\n}\n\n/* Custom Scrollbar */\n::-webkit-scrollbar {\n  width: 8px;\n}\n\n::-webkit-scrollbar-track {\n  @apply bg-gray-100 dark:bg-gray-800;\n}\n\n::-webkit-scrollbar-thumb {\n  @apply bg-gray-400 dark:bg-gray-600 rounded-full;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  @apply bg-gray-500 dark:bg-gray-500;\n}\n","size_bytes":8006},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/about-section.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { useIntersectionObserver } from \"@/hooks/use-intersection-observer\";\nimport { fadeInUp, slideInLeft, slideInRight } from \"@/lib/animations\";\n\nexport function AboutSection() {\n  const { ref, isIntersecting } = useIntersectionObserver();\n\n  return (\n    <section \n      ref={ref}\n      id=\"about\" \n      className=\"py-20 bg-white dark:bg-slate-800\"\n    >\n      <div className=\"container mx-auto px-4\">\n        <motion.div\n          variants={fadeInUp}\n          initial=\"hidden\"\n          animate={isIntersecting ? \"visible\" : \"hidden\"}\n          className=\"text-center mb-16\"\n        >\n          <h2 className=\"section-title\">About Me</h2>\n          <p className=\"section-subtitle\">Passionate about turning data into insights</p>\n        </motion.div>\n        \n        <div className=\"grid lg:grid-cols-2 gap-12 items-center\">\n          <motion.div\n            variants={slideInLeft}\n            initial=\"hidden\"\n            animate={isIntersecting ? \"visible\" : \"hidden\"}\n            className=\"relative\"\n          >\n            {/* Interactive Data Science Visualization */}\n            <div className=\"relative bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-slate-700 dark:to-slate-800 rounded-2xl shadow-xl p-8 overflow-hidden\">\n              {/* Background animated elements */}\n              <div className=\"absolute inset-0 opacity-20\">\n                {[...Array(12)].map((_, i) => (\n                  <motion.div\n                    key={i}\n                    className=\"absolute w-2 h-2 bg-blue-400 rounded-full\"\n                    style={{\n                      left: `${Math.random() * 100}%`,\n                      top: `${Math.random() * 100}%`,\n                    }}\n                    animate={{\n                      scale: [1, 1.5, 1],\n                      opacity: [0.3, 0.8, 0.3],\n                    }}\n                    transition={{\n                      duration: Math.random() * 3 + 2,\n                      repeat: Infinity,\n                      ease: \"easeInOut\",\n                      delay: Math.random() * 2,\n                    }}\n                  />\n                ))}\n              </div>\n\n              {/* Main visual content */}\n              <div className=\"relative z-10\">\n                {/* Title */}\n                <motion.h3\n                  className=\"text-2xl font-bold text-gray-800 dark:text-white mb-6 text-center\"\n                  animate={{ \n                    backgroundPosition: [\"0% 50%\", \"100% 50%\", \"0% 50%\"],\n                  }}\n                  transition={{ duration: 4, repeat: Infinity }}\n                >\n                  Data Science Ecosystem\n                </motion.h3>\n\n                {/* Interactive elements grid */}\n                <div className=\"grid grid-cols-3 gap-4 mb-6\">\n                  {[\n                    { name: \"Python\", color: \"bg-yellow-500\", delay: 0 },\n                    { name: \"ML\", color: \"bg-green-500\", delay: 0.2 },\n                    { name: \"SQL\", color: \"bg-blue-500\", delay: 0.4 },\n                    { name: \"Pandas\", color: \"bg-purple-500\", delay: 0.6 },\n                    { name: \"Viz\", color: \"bg-red-500\", delay: 0.8 },\n                    { name: \"GIS\", color: \"bg-indigo-500\", delay: 1.0 },\n                  ].map((tech, index) => (\n                    <motion.div\n                      key={tech.name}\n                      className={`${tech.color} rounded-lg p-3 text-white text-center font-semibold text-sm`}\n                      initial={{ opacity: 0, scale: 0 }}\n                      animate={{ \n                        opacity: 1, \n                        scale: [1, 1.1, 1],\n                      }}\n                      transition={{\n                        opacity: { delay: tech.delay, duration: 0.5 },\n                        scale: { \n                          delay: tech.delay + 1, \n                          duration: 2, \n                          repeat: Infinity, \n                          ease: \"easeInOut\" \n                        }\n                      }}\n                      whileHover={{ scale: 1.15 }}\n                    >\n                      {tech.name}\n                    </motion.div>\n                  ))}\n                </div>\n\n                {/* Data flow visualization */}\n                <div className=\"relative h-20 bg-white dark:bg-slate-600 rounded-lg p-4 overflow-hidden\">\n                  <div className=\"flex items-center justify-between h-full\">\n                    <div className=\"text-xs font-medium text-gray-600 dark:text-gray-300\">Raw Data</div>\n                    <motion.div\n                      className=\"flex-1 mx-4 h-1 bg-gray-300 dark:bg-gray-500 rounded-full overflow-hidden\"\n                    >\n                      <motion.div\n                        className=\"h-full bg-gradient-to-r from-blue-500 to-green-500 rounded-full\"\n                        animate={{\n                          x: [\"-100%\", \"0%\", \"100%\"],\n                        }}\n                        transition={{\n                          duration: 3,\n                          repeat: Infinity,\n                          ease: \"easeInOut\",\n                        }}\n                      />\n                    </motion.div>\n                    <div className=\"text-xs font-medium text-gray-600 dark:text-gray-300\">Insights</div>\n                  </div>\n                  \n                  {/* Floating data points */}\n                  {[...Array(8)].map((_, i) => (\n                    <motion.div\n                      key={i}\n                      className=\"absolute w-1 h-1 bg-blue-400 rounded-full\"\n                      style={{\n                        left: `${10 + (i * 10)}%`,\n                        top: \"50%\",\n                      }}\n                      animate={{\n                        y: [-10, 10, -10],\n                        opacity: [0.3, 1, 0.3],\n                      }}\n                      transition={{\n                        duration: 1.5,\n                        repeat: Infinity,\n                        delay: i * 0.2,\n                        ease: \"easeInOut\",\n                      }}\n                    />\n                  ))}\n                </div>\n\n                {/* Interactive stats */}\n                <div className=\"grid grid-cols-2 gap-4 mt-6\">\n                  <motion.div\n                    className=\"bg-white dark:bg-slate-600 rounded-lg p-3 text-center\"\n                    whileHover={{ scale: 1.05 }}\n                  >\n                    <motion.div\n                      className=\"text-xl font-bold text-blue-600 dark:text-blue-400\"\n                      animate={{ \n                        textShadow: [\"0 0 0px #3B82F6\", \"0 0 10px #3B82F6\", \"0 0 0px #3B82F6\"],\n                      }}\n                      transition={{ duration: 2, repeat: Infinity }}\n                    >\n                      95%\n                    </motion.div>\n                    <div className=\"text-xs text-gray-600 dark:text-gray-300\">Accuracy</div>\n                  </motion.div>\n                  <motion.div\n                    className=\"bg-white dark:bg-slate-600 rounded-lg p-3 text-center\"\n                    whileHover={{ scale: 1.05 }}\n                  >\n                    <motion.div\n                      className=\"text-xl font-bold text-green-600 dark:text-green-400\"\n                      animate={{ \n                        textShadow: [\"0 0 0px #10B981\", \"0 0 10px #10B981\", \"0 0 0px #10B981\"],\n                      }}\n                      transition={{ duration: 2, repeat: Infinity, delay: 1 }}\n                    >\n                      15+\n                    </motion.div>\n                    <div className=\"text-xs text-gray-600 dark:text-gray-300\">Projects</div>\n                  </motion.div>\n                </div>\n              </div>\n\n              {/* Hover interaction overlay */}\n              <motion.div\n                className=\"absolute inset-0 bg-gradient-to-r from-blue-500/10 to-purple-500/10 opacity-0 rounded-2xl\"\n                whileHover={{ opacity: 1 }}\n                transition={{ duration: 0.3 }}\n              />\n            </div>\n          </motion.div>\n          \n          <motion.div\n            variants={slideInRight}\n            initial=\"hidden\"\n            animate={isIntersecting ? \"visible\" : \"hidden\"}\n          >\n            <p className=\"text-lg text-gray-600 dark:text-gray-300 leading-relaxed mb-6\">\n              Results-driven and detail-oriented Data Science undergraduate with solid experience in data analysis, machine learning, and GIS & Spatial Data Analysis. Proven ability to design and deliver scalable solutions, leveraging technologies like Python, SQL, and Blockchain.\n            </p>\n            <p className=\"text-lg text-gray-600 dark:text-gray-300 leading-relaxed mb-8\">\n              Demonstrated success in hackathons, academic projects, and tool development. Adept in translating business needs into technical solutions. Seeking to contribute to data-driven or tech-oriented roles in a dynamic organization.\n            </p>\n          </motion.div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":9174},"client/src/components/certifications-section.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { useIntersectionObserver } from \"@/hooks/use-intersection-observer\";\nimport { fadeInUp, staggerContainer } from \"@/lib/animations\";\nimport { useState } from \"react\";\nimport { ChevronDown } from \"lucide-react\";\n\n// Company Icons - using SVG for better control\nconst CompanyIcons = {\n  IBM: () => (\n    <svg viewBox=\"0 0 24 24\" className=\"w-8 h-8\" fill=\"currentColor\">\n      <path d=\"M0 7.334h4.762v1.333H0V7.334zm5.762 0H7.43v1.333H5.762V7.334zm2.668 0h4.762v1.333H8.43V7.334zm5.762 0h4.762v1.333h-4.762V7.334zm5.762 0H24v1.333h-4.046V7.334zM0 9.334h1.905v1.333H0V9.334zm2.857 0h1.905v1.333H2.857V9.334zm2.905 0H7.43v1.333H5.762V9.334zm2.668 0h1.905v1.333H8.43V9.334zm2.857 0h1.905v1.333h-1.905V9.334zm2.905 0h1.905v1.333h-1.905V9.334zm2.857 0h1.905v1.333h-1.905V9.334zm2.905 0H24v1.333h-1.905V9.334zM0 11.334h4.762v1.333H0v-1.333zm5.762 0H7.43v1.333H5.762v-1.333zm2.668 0h4.762v1.333H8.43v-1.333zm5.762 0h4.762v1.333h-4.762v-1.333zm5.762 0H24v1.333h-4.046v-1.333zM0 13.334h1.905v1.333H0v-1.333zm2.857 0h1.905v1.333H2.857v-1.333zm2.905 0H7.43v1.333H5.762v-1.333zm2.668 0h1.905v1.333H8.43v-1.333zm2.857 0h1.905v1.333h-1.905v-1.333zm2.905 0h1.905v1.333h-1.905v-1.333zm2.857 0h1.905v1.333h-1.905v-1.333zm2.905 0H24v1.333h-1.905v-1.333zM0 15.334h4.762v1.333H0v-1.333zm5.762 0H7.43v1.333H5.762v-1.333zm2.668 0h4.762v1.333H8.43v-1.333zm5.762 0h4.762v1.333h-4.762v-1.333zm5.762 0H24v1.333h-4.046v-1.333z\"/>\n    </svg>\n  ),\n  ISRO: () => (\n    <svg viewBox=\"0 0 24 24\" className=\"w-8 h-8\" fill=\"currentColor\">\n      <path d=\"M12 2L2 7l10 5 10-5-10-5zM2 17l10 5 10-5M2 12l10 5 10-5\"/>\n    </svg>\n  ),\n  Udemy: () => (\n    <svg viewBox=\"0 0 24 24\" className=\"w-8 h-8\" fill=\"currentColor\">\n      <path d=\"M23.003 8.932c-.504-1.698-1.596-3.206-3.087-4.297C18.426 3.544 16.835 3 15.075 3s-3.35.544-4.84 1.635c-.735.538-1.336 1.181-1.847 1.912-.276-.302-.594-.572-.943-.803C6.036 4.847 4.445 4.303 2.685 4.303S-1.665 4.847-3.154 5.938c-1.491 1.091-2.583 2.6-3.087 4.297L-6.5 11.5c-.36 1.216-.36 2.484 0 3.7l.259.771c.504 1.698 1.596 3.206 3.087 4.297C-1.665 21.359-.074 21.903 1.686 21.903s3.35-.544 4.84-1.635c1.491-1.091 2.583-2.6 3.087-4.297L12 8.932z\"/>\n    </svg>\n  ),\n  DeepLearning: () => (\n    <svg viewBox=\"0 0 24 24\" className=\"w-8 h-8\" fill=\"currentColor\">\n      <path d=\"M12 2C6.477 2 2 6.477 2 12s4.477 10 10 10 10-4.477 10-10S17.523 2 12 2zm0 18c-4.411 0-8-3.589-8-8s3.589-8 8-8 8 3.589 8 8-3.589 8-8 8zm-1-13h2v6h-2zm0 8h2v2h-2z\"/>\n    </svg>\n  ),\n  MongoDB: () => (\n    <svg viewBox=\"0 0 24 24\" className=\"w-8 h-8\" fill=\"currentColor\">\n      <path d=\"M17.193 9.555c-1.264-5.58-4.252-7.414-4.573-8.115-.28-.394-.53-.954-.735-1.44-.036.495-.055.685-.523 1.184C10.616 2.17 7.666 4.003 6.402 9.583c-.525 2.314-.404 4.64.34 6.896.744 2.256 2.066 4.34 3.83 5.865.352.305.744.608 1.16.888.416-.28.808-.583 1.16-.888 1.764-1.525 3.086-3.609 3.83-5.865.744-2.256.865-4.582.34-6.896z\"/>\n    </svg>\n  ),\n  GreatLearning: () => (\n    <svg viewBox=\"0 0 24 24\" className=\"w-8 h-8\" fill=\"currentColor\">\n      <path d=\"M12 2L2 7l10 5 10-5-10-5zM2 17l10 5 10-5M2 12l10 5 10-5\"/>\n    </svg>\n  ),\n  YHills: () => (\n    <svg viewBox=\"0 0 24 24\" className=\"w-8 h-8\" fill=\"currentColor\">\n      <path d=\"M6 2l3 6 5-4-1 7 4-2-2 4h3l-3 3 5 1-5 3 3 2-6-1-2 5-2-5-6 1 3-2-5-3 5-1-3-3h3l-2-4 4 2-1-7 5 4 3-6z\"/>\n    </svg>\n  ),\n  Simplilearn: () => (\n    <svg viewBox=\"0 0 24 24\" className=\"w-8 h-8\" fill=\"currentColor\">\n      <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z\"/>\n    </svg>\n  )\n};\n\nconst mainCertifications = [\n  {\n    title: \"Design Thinking\",\n    organization: \"IBM\",\n    description: \"Enterprise Design Thinking Practitioner certification focusing on human-centered design methodologies and innovation frameworks.\",\n    icon: \"IBM\",\n    color: \"from-blue-500 to-blue-700\",\n    bgColor: \"bg-blue-50 dark:bg-blue-900/20\",\n    borderColor: \"border-blue-200 dark:border-blue-700\",\n  },\n  {\n    title: \"Overview of Geographic Information System (GIS)\",\n    organization: \"ISRO\",\n    description: \"Comprehensive understanding of spatial data analysis, remote sensing, and geographic information systems from Indian Space Research Organisation.\",\n    icon: \"ISRO\",\n    color: \"from-orange-500 to-red-600\",\n    bgColor: \"bg-orange-50 dark:bg-orange-900/20\",\n    borderColor: \"border-orange-200 dark:border-orange-700\",\n  },\n  {\n    title: \"Complete Data Science NLP ML DL\",\n    organization: \"Udemy\",\n    description: \"Comprehensive course covering data science, natural language processing, machine learning, and deep learning with hands-on projects.\",\n    icon: \"Udemy\",\n    color: \"from-purple-500 to-pink-600\",\n    bgColor: \"bg-purple-50 dark:bg-purple-900/20\",\n    borderColor: \"border-purple-200 dark:border-purple-700\",\n  },\n  {\n    title: \"Vibe Coding with Replit\",\n    organization: \"Deeplearning.AI\",\n    description: \"Advanced coding practices and collaborative development using modern cloud-based development environments.\",\n    icon: \"DeepLearning\",\n    color: \"from-green-500 to-emerald-600\",\n    bgColor: \"bg-green-50 dark:bg-green-900/20\",\n    borderColor: \"border-green-200 dark:border-green-700\",\n  },\n];\n\nconst additionalCertifications = [\n  {\n    title: \"MongoDB Developer Path\",\n    organization: \"MongoDB University\",\n    description: \"Database design, aggregation pipelines, and performance optimization.\",\n    icon: \"MongoDB\",\n    color: \"from-green-600 to-green-800\",\n  },\n  {\n    title: \"Data Science Foundations\",\n    organization: \"Great Learning\",\n    description: \"Statistical analysis, data visualization, and predictive modeling.\",\n    icon: \"GreatLearning\",\n    color: \"from-indigo-500 to-purple-600\",\n  },\n  {\n    title: \"Cloud Computing Essentials\",\n    organization: \"YHills Academy\",\n    description: \"AWS fundamentals, cloud architecture, and deployment strategies.\",\n    icon: \"YHills\",\n    color: \"from-yellow-500 to-orange-600\",\n  },\n  {\n    title: \"SQL for Data Science\",\n    organization: \"Simplilearn\",\n    description: \"Advanced SQL queries, database optimization, and data manipulation.\",\n    icon: \"Simplilearn\",\n    color: \"from-teal-500 to-cyan-600\",\n  },\n];\n\nexport function CertificationsSection() {\n  const { ref, isIntersecting } = useIntersectionObserver();\n  const [showAll, setShowAll] = useState(false);\n\n  return (\n    <section \n      ref={ref}\n      id=\"certifications\" \n      className=\"py-20 bg-white dark:bg-slate-800\"\n    >\n      <div className=\"container mx-auto px-4\">\n        <motion.div\n          variants={fadeInUp}\n          initial=\"hidden\"\n          animate={isIntersecting ? \"visible\" : \"hidden\"}\n          className=\"text-center mb-16\"\n        >\n          <h2 className=\"section-title\">Certifications</h2>\n          <p className=\"section-subtitle\">Professional certifications and learning achievements</p>\n        </motion.div>\n        \n        <motion.div\n          variants={staggerContainer}\n          initial=\"hidden\"\n          animate={isIntersecting ? \"visible\" : \"hidden\"}\n          className=\"grid md:grid-cols-2 gap-8 mb-12\"\n        >\n          {mainCertifications.map((cert, index) => {\n            const IconComponent = CompanyIcons[cert.icon as keyof typeof CompanyIcons];\n            return (\n              <motion.div\n                key={cert.title}\n                variants={fadeInUp}\n                className={`group p-6 rounded-2xl border-2 ${cert.borderColor} ${cert.bgColor} hover:shadow-2xl transition-all duration-300 transform hover:-translate-y-2`}\n              >\n                <div className=\"flex items-start space-x-4\">\n                  <div className={`p-3 rounded-xl bg-gradient-to-r ${cert.color} text-white flex-shrink-0`}>\n                    <IconComponent />\n                  </div>\n                  <div className=\"flex-1\">\n                    <h3 className=\"text-xl font-bold text-gray-900 dark:text-white mb-2 group-hover:text-blue-600 dark:group-hover:text-blue-400 transition-colors\">\n                      {cert.title}\n                    </h3>\n                    <p className=\"text-lg font-semibold text-gray-700 dark:text-gray-300 mb-3\">\n                      {cert.organization}\n                    </p>\n                    <p className=\"text-gray-600 dark:text-gray-400 leading-relaxed\">\n                      {cert.description}\n                    </p>\n                  </div>\n                </div>\n              </motion.div>\n            );\n          })}\n        </motion.div>\n\n        {/* Show More/Less Button */}\n        <div className=\"text-center mb-8\">\n          <button\n            onClick={() => setShowAll(!showAll)}\n            className=\"inline-flex items-center px-6 py-3 bg-blue-600 dark:bg-blue-500 text-white rounded-full hover:bg-blue-700 dark:hover:bg-blue-600 transition-all duration-300 transform hover:scale-105 font-medium\"\n          >\n            {showAll ? 'Show Less' : 'Show More Certifications'}\n            <ChevronDown className={`ml-2 w-4 h-4 transition-transform duration-300 ${showAll ? 'rotate-180' : ''}`} />\n          </button>\n        </div>\n\n        {/* Additional Certifications */}\n        <motion.div\n          initial={{ height: 0, opacity: 0 }}\n          animate={{ \n            height: showAll ? 'auto' : 0,\n            opacity: showAll ? 1 : 0\n          }}\n          transition={{ duration: 0.5, ease: \"easeInOut\" }}\n          className=\"overflow-hidden\"\n        >\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            {additionalCertifications.map((cert, index) => {\n              const IconComponent = CompanyIcons[cert.icon as keyof typeof CompanyIcons];\n              return (\n                <motion.div\n                  key={cert.title}\n                  initial={{ opacity: 0, y: 20 }}\n                  animate={{ opacity: showAll ? 1 : 0, y: showAll ? 0 : 20 }}\n                  transition={{ delay: index * 0.1 }}\n                  className=\"group p-4 rounded-xl bg-gray-50 dark:bg-slate-700 hover:shadow-lg transition-all duration-300 transform hover:-translate-y-1\"\n                >\n                  <div className={`p-2 rounded-lg bg-gradient-to-r ${cert.color} text-white w-fit mb-3`}>\n                    <IconComponent />\n                  </div>\n                  <h4 className=\"font-bold text-gray-900 dark:text-white mb-2 group-hover:text-blue-600 dark:group-hover:text-blue-400 transition-colors\">\n                    {cert.title}\n                  </h4>\n                  <p className=\"text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                    {cert.organization}\n                  </p>\n                  <p className=\"text-xs text-gray-600 dark:text-gray-400\">\n                    {cert.description}\n                  </p>\n                </motion.div>\n              );\n            })}\n          </div>\n        </motion.div>\n      </div>\n    </section>\n  );\n}","size_bytes":10918},"client/src/components/contact-section.tsx":{"content":"import { useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { Mail, Phone, MapPin, Linkedin, Send, CheckCircle } from \"lucide-react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useIntersectionObserver } from \"@/hooks/use-intersection-observer\";\nimport { fadeInUp, slideInLeft, slideInRight } from \"@/lib/animations\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nconst contactFormSchema = z.object({\n  name: z.string().min(2, \"Name must be at least 2 characters\"),\n  email: z.string().email(\"Please enter a valid email\"),\n  subject: z.string().min(5, \"Subject must be at least 5 characters\"),\n  message: z.string().min(10, \"Message must be at least 10 characters\"),\n});\n\ntype ContactFormData = z.infer<typeof contactFormSchema>;\n\nconst contactInfo = [\n  {\n    icon: Mail,\n    title: \"Email\",\n    value: \"vanshsharma.official0411@gmail.com\",\n    href: \"mailto:vanshsharma.official0411@gmail.com\",\n    color: \"text-blue-600 bg-blue-100 dark:bg-blue-900 dark:text-blue-400\",\n  },\n  {\n    icon: Phone,\n    title: \"Phone\",\n    value: \"+91 8006792006\",\n    href: \"tel:+918006792006\",\n    color: \"text-green-600 bg-green-100 dark:bg-green-900 dark:text-green-400\",\n  },\n  {\n    icon: MapPin,\n    title: \"Location\",\n    value: \"Dehradun, Uttarakhand, India\",\n    href: null,\n    color: \"text-purple-600 bg-purple-100 dark:bg-purple-900 dark:text-purple-400\",\n  },\n  {\n    icon: Linkedin,\n    title: \"LinkedIn\",\n    value: \"linkedin.com/in/vansh-sharma\",\n    href: \"https://www.linkedin.com/in/vansh-sharma-778308357/\",\n    color: \"text-blue-600 bg-blue-100 dark:bg-blue-900 dark:text-blue-400\",\n  },\n];\n\nexport function ContactSection() {\n  const { ref, isIntersecting } = useIntersectionObserver();\n  const { toast } = useToast();\n  const [isSubmitted, setIsSubmitted] = useState(false);\n\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: { errors, isSubmitting },\n  } = useForm<ContactFormData>({\n    resolver: zodResolver(contactFormSchema),\n  });\n\n  const contactMutation = useMutation({\n    mutationFn: async (data: ContactFormData) => {\n      return apiRequest(\"POST\", \"/api/contact\", data);\n    },\n    onSuccess: () => {\n      setIsSubmitted(true);\n      reset();\n      toast({\n        title: \"Message sent successfully!\",\n        description: \"I'll get back to you as soon as possible.\",\n      });\n      \n      // Reset success state after 3 seconds\n      setTimeout(() => {\n        setIsSubmitted(false);\n      }, 3000);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to send message\",\n        description: error.message || \"Please try again later.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: ContactFormData) => {\n    contactMutation.mutate(data);\n  };\n\n  return (\n    <section \n      ref={ref}\n      id=\"contact\" \n      className=\"py-20 bg-gray-50 dark:bg-slate-900\"\n    >\n      <div className=\"container mx-auto px-4\">\n        <motion.div\n          variants={fadeInUp}\n          initial=\"hidden\"\n          animate={isIntersecting ? \"visible\" : \"hidden\"}\n          className=\"text-center mb-16\"\n        >\n          <h2 className=\"section-title\">Let's Connect</h2>\n          <p className=\"section-subtitle\">Ready to discuss opportunities or collaborations</p>\n        </motion.div>\n        \n        <div className=\"grid lg:grid-cols-2 gap-12\">\n          <motion.div\n            variants={slideInLeft}\n            initial=\"hidden\"\n            animate={isIntersecting ? \"visible\" : \"hidden\"}\n          >\n            <h3 className=\"text-2xl font-semibold mb-6 text-gray-900 dark:text-gray-100\">\n              Get In Touch\n            </h3>\n            <p className=\"text-lg text-gray-600 dark:text-gray-400 mb-8\">\n              Always eager to connect with professionals and collaborators interested in data science, geospatial intelligence, or innovative analytical projects.\n            </p>\n            \n            <div className=\"space-y-6\">\n              {contactInfo.map((item, index) => (\n                <motion.div\n                  key={item.title}\n                  initial={{ opacity: 0, x: -20 }}\n                  animate={isIntersecting ? { opacity: 1, x: 0 } : { opacity: 0, x: -20 }}\n                  transition={{ delay: 0.2 + index * 0.1 }}\n                  className=\"flex items-center space-x-4\"\n                >\n                  <div className={`w-12 h-12 rounded-lg flex items-center justify-center ${item.color}`}>\n                    <item.icon className=\"w-5 h-5\" />\n                  </div>\n                  <div>\n                    <h4 className=\"font-semibold text-gray-900 dark:text-gray-100\">\n                      {item.title}\n                    </h4>\n                    {item.href ? (\n                      <a \n                        href={item.href}\n                        target={item.href.startsWith(\"http\") ? \"_blank\" : undefined}\n                        rel={item.href.startsWith(\"http\") ? \"noopener noreferrer\" : undefined}\n                        className=\"text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300 transition-colors\"\n                      >\n                        {item.value}\n                      </a>\n                    ) : (\n                      <p className=\"text-gray-600 dark:text-gray-400\">{item.value}</p>\n                    )}\n                  </div>\n                </motion.div>\n              ))}\n            </div>\n          </motion.div>\n          \n          {/* Contact Form */}\n          <motion.div\n            variants={slideInRight}\n            initial=\"hidden\"\n            animate={isIntersecting ? \"visible\" : \"hidden\"}\n          >\n            <div className=\"bg-white dark:bg-slate-800 p-8 rounded-2xl shadow-lg\">\n              <h3 className=\"text-2xl font-semibold mb-6 text-gray-900 dark:text-gray-100\">\n                Send Message\n              </h3>\n              <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-6\">\n                <div>\n                  <label className=\"block text-sm font-medium mb-2 text-gray-900 dark:text-gray-100\">\n                    Name\n                  </label>\n                  <input\n                    {...register(\"name\")}\n                    type=\"text\"\n                    className=\"form-input\"\n                    placeholder=\"Your name\"\n                  />\n                  {errors.name && (\n                    <p className=\"text-sm text-red-500 mt-1\">{errors.name.message}</p>\n                  )}\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium mb-2 text-gray-900 dark:text-gray-100\">\n                    Email\n                  </label>\n                  <input\n                    {...register(\"email\")}\n                    type=\"email\"\n                    className=\"form-input\"\n                    placeholder=\"your.email@example.com\"\n                  />\n                  {errors.email && (\n                    <p className=\"text-sm text-red-500 mt-1\">{errors.email.message}</p>\n                  )}\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium mb-2 text-gray-900 dark:text-gray-100\">\n                    Subject\n                  </label>\n                  <input\n                    {...register(\"subject\")}\n                    type=\"text\"\n                    className=\"form-input\"\n                    placeholder=\"What's this about?\"\n                  />\n                  {errors.subject && (\n                    <p className=\"text-sm text-red-500 mt-1\">{errors.subject.message}</p>\n                  )}\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium mb-2 text-gray-900 dark:text-gray-100\">\n                    Message\n                  </label>\n                  <textarea\n                    {...register(\"message\")}\n                    rows={5}\n                    className=\"form-input resize-none\"\n                    placeholder=\"Tell me about your project or opportunity...\"\n                  />\n                  {errors.message && (\n                    <p className=\"text-sm text-red-500 mt-1\">{errors.message.message}</p>\n                  )}\n                </div>\n                \n                <button\n                  type=\"submit\"\n                  disabled={isSubmitting || contactMutation.isPending}\n                  className={`w-full transition-all duration-300 ${\n                    isSubmitted\n                      ? \"bg-green-600 hover:bg-green-700\"\n                      : \"bg-blue-600 hover:bg-blue-700\"\n                  } text-white font-medium py-3 px-6 rounded-lg inline-flex items-center justify-center shadow-lg hover:shadow-xl transform hover:-translate-y-1 disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none`}\n                >\n                  {isSubmitting || contactMutation.isPending ? (\n                    <>\n                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                      Sending...\n                    </>\n                  ) : isSubmitted ? (\n                    <>\n                      <CheckCircle className=\"w-5 h-5 mr-2\" />\n                      Message Sent!\n                    </>\n                  ) : (\n                    <>\n                      <Send className=\"w-5 h-5 mr-2\" />\n                      Send Message\n                    </>\n                  )}\n                </button>\n              </form>\n            </div>\n          </motion.div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":9867},"client/src/components/data-science-visualization.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { useIntersectionObserver } from \"@/hooks/use-intersection-observer\";\nimport { fadeInUp } from \"@/lib/animations\";\nimport { useState, useEffect } from \"react\";\nimport { BarChart3, Brain, Database, TrendingUp, Zap, Globe } from \"lucide-react\";\n\n// Interactive data visualization component\nconst DataVisualization = () => {\n  const [activeDataPoint, setActiveDataPoint] = useState(0);\n  const [animationStep, setAnimationStep] = useState(0);\n\n  const dataPoints = [\n    { value: 85, label: \"Data Collection\", color: \"bg-blue-500\", icon: Database },\n    { value: 92, label: \"Analysis\", color: \"bg-green-500\", icon: BarChart3 },\n    { value: 88, label: \"ML Modeling\", color: \"bg-purple-500\", icon: Brain },\n    { value: 90, label: \"Insights\", color: \"bg-orange-500\", icon: TrendingUp },\n    { value: 95, label: \"Implementation\", color: \"bg-red-500\", icon: Zap },\n  ];\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setActiveDataPoint((prev) => (prev + 1) % dataPoints.length);\n      setAnimationStep((prev) => prev + 1);\n    }, 2000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <div className=\"relative w-full h-80 bg-white dark:bg-slate-800 rounded-2xl p-6 shadow-lg overflow-hidden\">\n      {/* Background grid */}\n      <div className=\"absolute inset-0 opacity-10\">\n        <svg className=\"w-full h-full\">\n          <defs>\n            <pattern id=\"grid\" width=\"20\" height=\"20\" patternUnits=\"userSpaceOnUse\">\n              <path d=\"M 20 0 L 0 0 0 20\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"0.5\"/>\n            </pattern>\n          </defs>\n          <rect width=\"100%\" height=\"100%\" fill=\"url(#grid)\" />\n        </svg>\n      </div>\n\n      {/* Animated data bars */}\n      <div className=\"relative z-10 h-full flex items-end justify-around\">\n        {dataPoints.map((point, index) => {\n          const IconComponent = point.icon;\n          const isActive = index === activeDataPoint;\n          \n          return (\n            <motion.div\n              key={point.label}\n              className=\"flex flex-col items-center\"\n              onMouseEnter={() => setActiveDataPoint(index)}\n            >\n              {/* Data bar */}\n              <motion.div\n                className={`w-12 ${point.color} rounded-t-lg relative overflow-hidden cursor-pointer`}\n                initial={{ height: 0 }}\n                animate={{ \n                  height: `${point.value * 2}px`,\n                  scale: isActive ? 1.1 : 1,\n                  boxShadow: isActive ? \"0 10px 25px rgba(0,0,0,0.2)\" : \"0 5px 15px rgba(0,0,0,0.1)\"\n                }}\n                transition={{ \n                  duration: 0.8, \n                  delay: index * 0.2,\n                  type: \"spring\",\n                  stiffness: 100\n                }}\n              >\n                {/* Animated shimmer effect */}\n                <motion.div\n                  className=\"absolute inset-0 bg-gradient-to-t from-transparent via-white/30 to-transparent\"\n                  animate={{\n                    y: isActive ? [\"-100%\", \"100%\"] : \"100%\",\n                  }}\n                  transition={{\n                    duration: 1.5,\n                    repeat: isActive ? Infinity : 0,\n                    ease: \"linear\",\n                  }}\n                />\n                \n                {/* Icon in bar */}\n                <div className=\"absolute top-2 left-1/2 transform -translate-x-1/2\">\n                  <motion.div\n                    animate={{ \n                      rotate: isActive ? 360 : 0,\n                      scale: isActive ? [1, 1.2, 1] : 1\n                    }}\n                    transition={{ duration: 0.5 }}\n                  >\n                    <IconComponent className=\"w-4 h-4 text-white\" />\n                  </motion.div>\n                </div>\n              </motion.div>\n              \n              {/* Value label */}\n              <motion.div\n                className=\"mt-2 text-center\"\n                animate={{ \n                  scale: isActive ? 1.1 : 1,\n                  color: isActive ? \"#3B82F6\" : \"#6B7280\"\n                }}\n              >\n                <div className=\"text-lg font-bold\">{point.value}%</div>\n                <div className=\"text-xs\">{point.label}</div>\n              </motion.div>\n            </motion.div>\n          );\n        })}\n      </div>\n\n      {/* Floating data particles */}\n      <div className=\"absolute inset-0 pointer-events-none\">\n        {[...Array(15)].map((_, i) => (\n          <motion.div\n            key={i}\n            className=\"absolute w-1 h-1 bg-blue-400 rounded-full opacity-40\"\n            initial={{\n              x: Math.random() * 100 + \"%\",\n              y: \"100%\",\n            }}\n            animate={{\n              y: \"-10%\",\n              x: Math.random() * 100 + \"%\",\n            }}\n            transition={{\n              duration: Math.random() * 8 + 5,\n              repeat: Infinity,\n              ease: \"linear\",\n              delay: Math.random() * 3,\n            }}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\n// ML Process flow visualization\nconst MLProcessFlow = () => {\n  const [currentStep, setCurrentStep] = useState(0);\n  \n  const steps = [\n    { name: \"Data Ingestion\", icon: Database, color: \"from-blue-400 to-blue-600\" },\n    { name: \"Data Preprocessing\", icon: Zap, color: \"from-green-400 to-green-600\" },\n    { name: \"Feature Engineering\", icon: Brain, color: \"from-purple-400 to-purple-600\" },\n    { name: \"Model Training\", icon: TrendingUp, color: \"from-orange-400 to-orange-600\" },\n    { name: \"Deployment\", icon: Globe, color: \"from-red-400 to-red-600\" },\n  ];\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setCurrentStep((prev) => (prev + 1) % steps.length);\n    }, 2500);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <div className=\"relative w-full h-32 bg-gradient-to-r from-slate-100 to-slate-200 dark:from-slate-700 dark:to-slate-800 rounded-2xl p-4 overflow-hidden\">\n      {/* Process flow */}\n      <div className=\"flex items-center justify-between h-full\">\n        {steps.map((step, index) => {\n          const IconComponent = step.icon;\n          const isActive = index === currentStep;\n          const isPassed = index < currentStep;\n          \n          return (\n            <div key={step.name} className=\"flex items-center\">\n              {/* Step circle */}\n              <motion.div\n                className={`relative w-12 h-12 rounded-full bg-gradient-to-r ${step.color} flex items-center justify-center`}\n                animate={{\n                  scale: isActive ? [1, 1.2, 1] : isPassed ? 1.1 : 0.9,\n                  opacity: isActive ? 1 : isPassed ? 0.8 : 0.4,\n                }}\n                transition={{ duration: 0.5 }}\n              >\n                <IconComponent className=\"w-5 h-5 text-white\" />\n                \n                {/* Pulse effect for active step */}\n                {isActive && (\n                  <motion.div\n                    className=\"absolute inset-0 rounded-full bg-white\"\n                    animate={{\n                      scale: [1, 1.5],\n                      opacity: [0.7, 0],\n                    }}\n                    transition={{\n                      duration: 1,\n                      repeat: Infinity,\n                      ease: \"easeOut\",\n                    }}\n                  />\n                )}\n              </motion.div>\n              \n              {/* Connection line */}\n              {index < steps.length - 1 && (\n                <motion.div\n                  className=\"flex-1 h-1 mx-2 bg-gray-300 dark:bg-gray-600 rounded\"\n                  initial={{ scaleX: 0 }}\n                  animate={{ \n                    scaleX: isPassed ? 1 : isActive ? 0.5 : 0,\n                    backgroundColor: isPassed ? \"#10B981\" : \"#6B7280\"\n                  }}\n                  style={{ transformOrigin: \"left\" }}\n                  transition={{ duration: 0.5 }}\n                />\n              )}\n            </div>\n          );\n        })}\n      </div>\n      \n      {/* Step name */}\n      <motion.div\n        className=\"absolute bottom-1 left-1/2 transform -translate-x-1/2\"\n        key={currentStep}\n        initial={{ opacity: 0, y: 10 }}\n        animate={{ opacity: 1, y: 0 }}\n        exit={{ opacity: 0, y: -10 }}\n      >\n        <span className=\"text-xs font-medium text-gray-600 dark:text-gray-300\">\n          {steps[currentStep].name}\n        </span>\n      </motion.div>\n    </div>\n  );\n};\n\nexport function DataScienceVisualization() {\n  const { ref, isIntersecting } = useIntersectionObserver();\n\n  return (\n    <section \n      ref={ref}\n      className=\"py-16 bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50 dark:from-slate-800 dark:via-slate-900 dark:to-slate-800\"\n    >\n      <div className=\"container mx-auto px-4\">\n        <motion.div\n          variants={fadeInUp}\n          initial=\"hidden\"\n          animate={isIntersecting ? \"visible\" : \"hidden\"}\n          className=\"text-center mb-12\"\n        >\n          <h3 className=\"text-3xl font-bold text-gray-900 dark:text-white mb-4\">\n            Data Science Workflow\n          </h3>\n          <p className=\"text-gray-600 dark:text-gray-300 max-w-2xl mx-auto\">\n            Interactive visualization of my data science expertise and machine learning pipeline\n          </p>\n        </motion.div>\n        \n        <div className=\"grid lg:grid-cols-2 gap-8\">\n          <motion.div\n            variants={fadeInUp}\n            initial=\"hidden\"\n            animate={isIntersecting ? \"visible\" : \"hidden\"}\n            transition={{ delay: 0.2 }}\n          >\n            <h4 className=\"text-xl font-semibold mb-4 text-gray-800 dark:text-gray-200\">\n              Proficiency Metrics\n            </h4>\n            <DataVisualization />\n          </motion.div>\n          \n          <motion.div\n            variants={fadeInUp}\n            initial=\"hidden\"\n            animate={isIntersecting ? \"visible\" : \"hidden\"}\n            transition={{ delay: 0.4 }}\n          >\n            <h4 className=\"text-xl font-semibold mb-4 text-gray-800 dark:text-gray-200\">\n              ML Development Pipeline\n            </h4>\n            <MLProcessFlow />\n          </motion.div>\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":10332},"client/src/components/education-section.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { Trophy, Award, Star, Target, PartyPopper } from \"lucide-react\";\nimport { useIntersectionObserver } from \"@/hooks/use-intersection-observer\";\nimport { fadeInUp, slideInLeft, slideInRight, staggerContainer } from \"@/lib/animations\";\nimport { useState, useEffect } from \"react\";\nimport Confetti from \"react-confetti\";\n\nconst achievements = [\n  {\n    title: \"Hackathon Winner\",\n    organization: \"Reckon 6.0 Hackathon, JIET Jodhpur\",\n    description: \"🥇 1st Place in Web3 & Blockchain Domain\",\n    icon: Trophy,\n    color: \"text-yellow-600 bg-yellow-100 dark:bg-yellow-900 dark:text-yellow-400\",\n    celebrationType: \"gold\",\n  },\n  {\n    title: \"Academic Excellence\",\n    organization: \"ICFAI University, Dehradun\",\n    description: \"🎯 Consistent CGPA of 7.96/10\",\n    icon: Star,\n    color: \"text-blue-600 bg-blue-100 dark:bg-blue-900 dark:text-blue-400\",\n    celebrationType: \"blue\",\n  },\n  {\n    title: \"Project Leadership\",\n    organization: \"Multiple Technical Projects\",\n    description: \"🚀 Led 15+ successful data science projects\",\n    icon: Target,\n    color: \"text-green-600 bg-green-100 dark:bg-green-900 dark:text-green-400\",\n    celebrationType: \"green\",\n  },\n  {\n    title: \"Community Recognition\",\n    organization: \"Open Source Contributions\",\n    description: \"⭐ Active contributor in data science community\",\n    icon: Award,\n    color: \"text-purple-600 bg-purple-100 dark:bg-purple-900 dark:text-purple-400\",\n    celebrationType: \"purple\",\n  },\n];\n\nconst courses = [\n  \"Data Structures & Algorithms\",\n  \"Machine Learning\",\n  \"DBMS\",\n  \"Statistics\",\n];\n\nexport function EducationSection() {\n  const { ref, isIntersecting } = useIntersectionObserver();\n  const [showConfetti, setShowConfetti] = useState(false);\n  const [celebratingAchievement, setCelebratingAchievement] = useState<string | null>(null);\n\n  return (\n    <section \n      ref={ref}\n      id=\"education\" \n      className=\"relative py-20 bg-gray-50 dark:bg-slate-900\"\n    >\n      {/* Confetti Effect */}\n      {showConfetti && (\n        <Confetti\n          width={window.innerWidth}\n          height={window.innerHeight}\n          numberOfPieces={200}\n          recycle={false}\n          gravity={0.3}\n          colors={['#FFD700', '#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FFEAA7']}\n        />\n      )}\n      <div className=\"container mx-auto px-4\">\n        <motion.div\n          variants={fadeInUp}\n          initial=\"hidden\"\n          animate={isIntersecting ? \"visible\" : \"hidden\"}\n          className=\"text-center mb-16\"\n        >\n          <h2 className=\"section-title\">Education & Achievements</h2>\n          <p className=\"section-subtitle\">My academic journey and major accomplishments</p>\n        </motion.div>\n        \n        <div className=\"grid lg:grid-cols-2 gap-12\">\n          {/* Education */}\n          <motion.div\n            variants={slideInLeft}\n            initial=\"hidden\"\n            animate={isIntersecting ? \"visible\" : \"hidden\"}\n          >\n            <h3 className=\"text-2xl font-semibold mb-8 text-blue-600 dark:text-blue-400\">Education</h3>\n            <div className=\"timeline\">\n              <div className=\"timeline-item\">\n                <div className=\"timeline-marker\"></div>\n                <div className=\"timeline-content bg-white dark:bg-slate-800 p-6 rounded-xl shadow-lg\">\n                  <div className=\"text-sm font-medium text-blue-600 dark:text-blue-400 mb-2\">\n                    2023 - 2026\n                  </div>\n                  <h4 className=\"text-lg font-semibold mb-2 text-gray-900 dark:text-gray-100\">\n                    B.Sc. in Data Science\n                  </h4>\n                  <p className=\"text-blue-600 dark:text-blue-400 mb-2\">\n                    ICFAI University, Dehradun\n                  </p>\n                  <p className=\"text-gray-600 dark:text-gray-400 mb-3\">\n                    CGPA: 7.96/10\n                  </p>\n                  <div className=\"flex flex-wrap gap-2\">\n                    {courses.map((course) => (\n                      <span \n                        key={course}\n                        className=\"px-2 py-1 bg-gray-100 dark:bg-gray-700 text-xs rounded-lg text-gray-600 dark:text-gray-400\"\n                      >\n                        {course}\n                      </span>\n                    ))}\n                  </div>\n                </div>\n              </div>\n            </div>\n          </motion.div>\n\n          {/* Achievements with Celebration */}\n          <motion.div\n            variants={slideInRight}\n            initial=\"hidden\"\n            animate={isIntersecting ? \"visible\" : \"hidden\"}\n          >\n            <h3 className=\"text-2xl font-semibold mb-8 text-emerald-600 dark:text-emerald-400 flex items-center\">\n              <PartyPopper className=\"w-6 h-6 mr-2\" />\n              Major Achievements\n            </h3>\n            <motion.div\n              variants={staggerContainer}\n              initial=\"hidden\"\n              animate={isIntersecting ? \"visible\" : \"hidden\"}\n              className=\"space-y-6\"\n            >\n              {achievements.map((achievement, index) => (\n                <motion.div\n                  key={achievement.title}\n                  variants={fadeInUp}\n                  className=\"group relative bg-white dark:bg-slate-800 p-4 rounded-xl shadow-lg hover:shadow-2xl transition-all duration-500 transform hover:-translate-y-2 cursor-pointer\"\n                  onClick={() => {\n                    setCelebratingAchievement(achievement.title);\n                    setShowConfetti(true);\n                    setTimeout(() => setShowConfetti(false), 3000);\n                  }}\n                  whileHover={{ scale: 1.02 }}\n                  whileTap={{ scale: 0.98 }}\n                >\n                  {/* Celebration overlay */}\n                  {celebratingAchievement === achievement.title && (\n                    <motion.div\n                      className=\"absolute inset-0 bg-gradient-to-r from-yellow-400/20 via-orange-400/20 to-red-400/20 rounded-xl\"\n                      initial={{ opacity: 0, scale: 0.8 }}\n                      animate={{ opacity: 1, scale: 1 }}\n                      exit={{ opacity: 0, scale: 0.8 }}\n                      transition={{ duration: 0.5 }}\n                    />\n                  )}\n                  \n                  <div className=\"flex items-center mb-3 relative z-10\">\n                    <motion.div\n                      className={`w-12 h-12 rounded-xl flex items-center justify-center ${achievement.color} group-hover:scale-110 transition-transform duration-300`}\n                      whileHover={{ rotate: 10 }}\n                    >\n                      <achievement.icon className=\"w-6 h-6\" />\n                    </motion.div>\n                    <div className=\"ml-4 flex-1\">\n                      <h4 className=\"font-bold text-gray-900 dark:text-gray-100 group-hover:text-blue-600 dark:group-hover:text-blue-400 transition-colors\">\n                        {achievement.title}\n                      </h4>\n                      <p className=\"text-sm text-gray-500 dark:text-gray-400\">\n                        {achievement.organization}\n                      </p>\n                    </div>\n                    <motion.div\n                      className=\"text-gray-400 group-hover:text-yellow-500 transition-colors\"\n                      animate={{ \n                        rotate: celebratingAchievement === achievement.title ? 360 : 0,\n                        scale: celebratingAchievement === achievement.title ? [1, 1.3, 1] : 1\n                      }}\n                      transition={{ duration: 0.5 }}\n                    >\n                      <PartyPopper className=\"w-5 h-5\" />\n                    </motion.div>\n                  </div>\n                  <p className=\"text-gray-600 dark:text-gray-400 relative z-10\">\n                    {achievement.description}\n                  </p>\n                  \n                  {/* Hover effect glow */}\n                  <motion.div\n                    className=\"absolute inset-0 border-2 border-transparent group-hover:border-yellow-400/50 rounded-xl transition-all duration-300\"\n                    animate={{\n                      boxShadow: celebratingAchievement === achievement.title\n                        ? \"0 0 30px rgba(251, 191, 36, 0.5)\"\n                        : \"0 0 0px rgba(251, 191, 36, 0)\",\n                    }}\n                  />\n                </motion.div>\n              ))}\n            </motion.div>\n            \n            {/* Click hint */}\n            <motion.p\n              className=\"text-xs text-gray-500 dark:text-gray-400 mt-4 text-center italic\"\n              animate={{ opacity: [0.5, 1, 0.5] }}\n              transition={{ duration: 2, repeat: Infinity }}\n            >\n              Click on achievements to celebrate! 🎉\n            </motion.p>\n          </motion.div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":8996},"client/src/components/enhanced-skills-section.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { useIntersectionObserver } from \"@/hooks/use-intersection-observer\";\nimport { fadeInUp, staggerContainer } from \"@/lib/animations\";\nimport { useState } from \"react\";\nimport { Code, Database, Brain, Globe, Zap, Cpu } from \"lucide-react\";\n\nconst skillCategories = [\n  {\n    title: \"Programming Languages\",\n    color: \"blue\",\n    icon: Code,\n    skills: [\n      { name: \"Python\", level: 90, description: \"Data Science, ML, Web Development\" },\n      { name: \"SQL\", level: 85, description: \"Database Management & Analytics\" },\n      { name: \"C/C++\", level: 75, description: \"System Programming & DSA\" },\n      { name: \"JavaScript\", level: 80, description: \"Web Development & Automation\" },\n    ],\n    gradient: \"from-blue-400 via-blue-500 to-blue-600\",\n  },\n  {\n    title: \"Data Science & ML\",\n    color: \"emerald\",\n    icon: Brain,\n    skills: [\n      { name: \"Pandas & NumPy\", level: 90, description: \"Data Manipulation & Analysis\" },\n      { name: \"Scikit-learn\", level: 80, description: \"Machine Learning Models\" },\n      { name: \"TensorFlow/Keras\", level: 75, description: \"Deep Learning & Neural Networks\" },\n      { name: \"Matplotlib/Seaborn\", level: 85, description: \"Data Visualization\" },\n    ],\n    gradient: \"from-emerald-400 via-emerald-500 to-emerald-600\",\n  },\n  {\n    title: \"Tools & Platforms\",\n    color: \"amber\",\n    icon: Zap,\n    skills: [\n      { name: \"Jupyter Notebook\", level: 95, description: \"Interactive Development\" },\n      { name: \"Tableau & Power BI\", level: 80, description: \"Business Intelligence\" },\n      { name: \"Git & GitHub\", level: 85, description: \"Version Control & Collaboration\" },\n      { name: \"Docker\", level: 70, description: \"Containerization & Deployment\" },\n    ],\n    gradient: \"from-amber-400 via-amber-500 to-amber-600\",\n  },\n  {\n    title: \"Specialized Skills\",\n    color: \"purple\",\n    icon: Globe,\n    skills: [\n      { name: \"GIS & Spatial Analytics\", level: 80, description: \"Geographic Information Systems\" },\n      { name: \"Blockchain Development\", level: 70, description: \"Web3 & Smart Contracts\" },\n      { name: \"APIs Integration\", level: 85, description: \"RESTful Services & Microservices\" },\n      { name: \"Cloud Computing\", level: 75, description: \"AWS, Azure, Google Cloud\" },\n    ],\n    gradient: \"from-purple-400 via-purple-500 to-purple-600\",\n  },\n];\n\n// Interactive floating particles animation\nconst FloatingParticles = () => {\n  return (\n    <div className=\"absolute inset-0 overflow-hidden pointer-events-none\">\n      {[...Array(20)].map((_, i) => (\n        <motion.div\n          key={i}\n          className=\"absolute w-2 h-2 bg-blue-400 rounded-full opacity-20\"\n          initial={{\n            x: Math.random() * 100 + \"%\",\n            y: \"100%\",\n          }}\n          animate={{\n            y: \"-10%\",\n            x: Math.random() * 100 + \"%\",\n          }}\n          transition={{\n            duration: Math.random() * 10 + 10,\n            repeat: Infinity,\n            ease: \"linear\",\n            delay: Math.random() * 5,\n          }}\n        />\n      ))}\n    </div>\n  );\n};\n\n// Interactive skill card with hover effects\nconst SkillCard = ({ category, index }: { category: any; index: number }) => {\n  const [isHovered, setIsHovered] = useState(false);\n  const IconComponent = category.icon;\n\n  return (\n    <motion.div\n      variants={fadeInUp}\n      onMouseEnter={() => setIsHovered(true)}\n      onMouseLeave={() => setIsHovered(false)}\n      className={`group relative overflow-hidden bg-white dark:bg-slate-800 p-6 rounded-3xl shadow-lg hover:shadow-2xl border border-gray-200 dark:border-slate-700 transition-all duration-700 transform hover:-translate-y-4 hover:scale-105`}\n    >\n      {/* Animated gradient background */}\n      <motion.div\n        className={`absolute inset-0 bg-gradient-to-br ${category.gradient} opacity-0 group-hover:opacity-10 transition-opacity duration-500`}\n        animate={{\n          scale: isHovered ? 1.1 : 1,\n          rotate: isHovered ? 5 : 0,\n        }}\n        transition={{ duration: 0.5 }}\n      />\n      \n      {/* Floating tech symbols */}\n      <div className=\"absolute top-2 right-2 opacity-10 group-hover:opacity-20 transition-opacity\">\n        <motion.div\n          animate={{\n            rotate: 360,\n            scale: [1, 1.1, 1],\n          }}\n          transition={{\n            duration: 8,\n            repeat: Infinity,\n            ease: \"linear\",\n          }}\n        >\n          <Cpu className=\"w-6 h-6 text-gray-400\" />\n        </motion.div>\n      </div>\n\n      {/* Header with icon and title */}\n      <div className=\"flex items-center mb-6\">\n        <motion.div\n          className={`p-3 rounded-2xl bg-gradient-to-r ${category.gradient} text-white mr-4`}\n          whileHover={{ rotate: 360, scale: 1.1 }}\n          transition={{ duration: 0.6 }}\n        >\n          <IconComponent className=\"w-6 h-6\" />\n        </motion.div>\n        <div>\n          <h3 className=\"text-xl font-bold text-gray-900 dark:text-white group-hover:text-blue-600 dark:group-hover:text-blue-400 transition-colors duration-300\">\n            {category.title}\n          </h3>\n        </div>\n      </div>\n\n      {/* Skills list with interactive progress bars */}\n      <div className=\"space-y-4\">\n        {category.skills.map((skill: any, skillIndex: number) => (\n          <motion.div\n            key={skill.name}\n            className=\"skill-item\"\n            initial={{ opacity: 0, x: -20 }}\n            animate={{ opacity: 1, x: 0 }}\n            transition={{ delay: skillIndex * 0.1 }}\n          >\n            <div className=\"flex justify-between items-center mb-2\">\n              <span className=\"font-semibold text-gray-900 dark:text-gray-100 text-sm\">\n                {skill.name}\n              </span>\n              <motion.span\n                className=\"text-xs text-gray-500 dark:text-gray-400 px-2 py-1 rounded-full bg-gray-100 dark:bg-gray-700\"\n                whileHover={{ scale: 1.1 }}\n              >\n                {skill.level}%\n              </motion.span>\n            </div>\n            <p className=\"text-xs text-gray-600 dark:text-gray-400 mb-2\">\n              {skill.description}\n            </p>\n            \n            {/* Interactive progress bar */}\n            <div className=\"relative h-2 bg-gray-200 dark:bg-gray-700 rounded-full overflow-hidden\">\n              <motion.div\n                className={`absolute top-0 left-0 h-full bg-gradient-to-r ${category.gradient} rounded-full`}\n                initial={{ width: 0 }}\n                animate={{ width: isHovered ? `${skill.level}%` : `${skill.level - 10}%` }}\n                transition={{\n                  duration: 0.8,\n                  delay: skillIndex * 0.1,\n                  ease: \"easeOut\",\n                }}\n              />\n              <motion.div\n                className=\"absolute top-0 left-0 h-full w-full bg-gradient-to-r from-transparent via-white to-transparent opacity-0\"\n                animate={{ \n                  x: isHovered ? [\"0%\", \"100%\"] : \"0%\",\n                  opacity: isHovered ? [0, 0.6, 0] : 0\n                }}\n                transition={{\n                  duration: 1.5,\n                  repeat: isHovered ? Infinity : 0,\n                  ease: \"easeInOut\",\n                }}\n              />\n            </div>\n          </motion.div>\n        ))}\n      </div>\n\n      {/* Hover effect overlay */}\n      <motion.div\n        className=\"absolute inset-0 border-2 border-transparent group-hover:border-blue-400 dark:group-hover:border-blue-500 rounded-3xl transition-all duration-500\"\n        animate={{\n          boxShadow: isHovered\n            ? \"0 0 30px rgba(59, 130, 246, 0.3)\"\n            : \"0 0 0px rgba(59, 130, 246, 0)\",\n        }}\n      />\n    </motion.div>\n  );\n};\n\nexport function EnhancedSkillsSection() {\n  const { ref, isIntersecting } = useIntersectionObserver();\n\n  return (\n    <section \n      ref={ref}\n      id=\"skills\" \n      className=\"relative py-20 bg-gradient-to-br from-gray-50 via-blue-50/30 to-purple-50/30 dark:from-slate-900 dark:via-slate-900 dark:to-slate-800 overflow-hidden\"\n    >\n      {/* Floating particles background */}\n      <FloatingParticles />\n      \n      {/* Background decorative elements */}\n      <div className=\"absolute inset-0 opacity-10\">\n        <motion.div\n          className=\"absolute top-20 left-10 w-72 h-72 bg-blue-500 rounded-full mix-blend-multiply filter blur-xl\"\n          animate={{\n            scale: [1, 1.2, 1],\n            rotate: [0, 180, 360],\n          }}\n          transition={{\n            duration: 20,\n            repeat: Infinity,\n            ease: \"linear\",\n          }}\n        />\n        <motion.div\n          className=\"absolute bottom-20 right-10 w-72 h-72 bg-purple-500 rounded-full mix-blend-multiply filter blur-xl\"\n          animate={{\n            scale: [1.2, 1, 1.2],\n            rotate: [360, 180, 0],\n          }}\n          transition={{\n            duration: 25,\n            repeat: Infinity,\n            ease: \"linear\",\n          }}\n        />\n      </div>\n\n      <div className=\"container mx-auto px-4 relative z-10\">\n        <motion.div\n          variants={fadeInUp}\n          initial=\"hidden\"\n          animate={isIntersecting ? \"visible\" : \"hidden\"}\n          className=\"text-center mb-16\"\n        >\n          <motion.h2 \n            className=\"section-title bg-gradient-to-r from-blue-600 via-purple-600 to-emerald-600 bg-clip-text text-transparent\"\n            animate={{\n              backgroundPosition: [\"0% 50%\", \"100% 50%\", \"0% 50%\"],\n            }}\n            transition={{\n              duration: 5,\n              repeat: Infinity,\n              ease: \"linear\",\n            }}\n          >\n            Technical Expertise\n          </motion.h2>\n          <p className=\"section-subtitle\">Cutting-edge technologies and advanced skill mastery</p>\n        </motion.div>\n        \n        <motion.div\n          variants={staggerContainer}\n          initial=\"hidden\"\n          animate={isIntersecting ? \"visible\" : \"hidden\"}\n          className=\"grid md:grid-cols-2 lg:grid-cols-2 xl:grid-cols-4 gap-8\"\n        >\n          {skillCategories.map((category, index) => (\n            <SkillCard key={category.title} category={category} index={index} />\n          ))}\n        </motion.div>\n\n        {/* Interactive tech stack visualization */}\n        <motion.div\n          initial={{ opacity: 0, y: 50 }}\n          animate={isIntersecting ? { opacity: 1, y: 0 } : { opacity: 0, y: 50 }}\n          transition={{ delay: 1, duration: 0.8 }}\n          className=\"mt-16 text-center\"\n        >\n          <div className=\"inline-flex items-center space-x-4 bg-white dark:bg-slate-800 rounded-full px-8 py-4 shadow-lg border border-gray-200 dark:border-slate-700\">\n            {skillCategories.map((category, index) => {\n              const IconComponent = category.icon;\n              return (\n                <motion.div\n                  key={category.title}\n                  className={`p-2 rounded-full bg-gradient-to-r ${category.gradient} text-white`}\n                  animate={{\n                    rotate: 360,\n                    scale: [1, 1.2, 1],\n                  }}\n                  transition={{\n                    duration: 3,\n                    repeat: Infinity,\n                    delay: index * 0.5,\n                    ease: \"easeInOut\",\n                  }}\n                  whileHover={{ scale: 1.3 }}\n                >\n                  <IconComponent className=\"w-5 h-5\" />\n                </motion.div>\n              );\n            })}\n          </div>\n        </motion.div>\n      </div>\n    </section>\n  );\n}","size_bytes":11618},"client/src/components/floating-social.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { Linkedin, Github, Mail, Phone } from \"lucide-react\";\n\nconst socialLinks = [\n  {\n    href: \"https://www.linkedin.com/in/vansh-sharma-778308357/\",\n    icon: Linkedin,\n    label: \"LinkedIn\",\n    className: \"bg-blue-600 text-white hover:bg-blue-700\",\n  },\n  {\n    href: \"https://github.com/sharmaji0411\",\n    icon: Github,\n    label: \"GitHub\",\n    className: \"bg-gray-800 text-white hover:bg-gray-900\",\n  },\n  {\n    href: \"mailto:vanshsharma.official0411@gmail.com\",\n    icon: Mail,\n    label: \"Email\",\n    className: \"bg-red-500 text-white hover:bg-red-600\",\n  },\n  {\n    href: \"tel:+918006792006\",\n    icon: Phone,\n    label: \"Phone\",\n    className: \"bg-green-500 text-white hover:bg-green-600\",\n  },\n];\n\nexport function FloatingSocial() {\n  return (\n    <motion.div\n      initial={{ x: 100, opacity: 0 }}\n      animate={{ x: 0, opacity: 1 }}\n      transition={{ delay: 1, duration: 0.8 }}\n      className=\"fixed right-6 top-1/2 transform -translate-y-1/2 z-40 space-y-4\"\n    >\n      {socialLinks.map((link, index) => (\n        <motion.a\n          key={link.href}\n          href={link.href}\n          target={link.href.startsWith(\"http\") ? \"_blank\" : undefined}\n          rel={link.href.startsWith(\"http\") ? \"noopener noreferrer\" : undefined}\n          initial={{ scale: 0 }}\n          animate={{ scale: 1 }}\n          transition={{ delay: 1.2 + index * 0.1 }}\n          whileHover={{ scale: 1.1, y: -4 }}\n          whileTap={{ scale: 0.95 }}\n          className={`social-float ${link.className}`}\n          aria-label={link.label}\n        >\n          <link.icon className=\"w-5 h-5\" />\n        </motion.a>\n      ))}\n    </motion.div>\n  );\n}\n","size_bytes":1688},"client/src/components/hero-section.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { Rocket, Mail, Download, ChevronDown } from \"lucide-react\";\nimport { fadeInUp, float } from \"@/lib/animations\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst typingTexts = [\n  \"Problem Solver\",\n  \"Data Science Enthusiast\",\n  \"GIS Analyst\",\n  \"Machine Learning Engineer\",\n  \"Backend Developer\",\n  \"Blockchain Developer\"\n];\n\nexport function HeroSection() {\n  const [typingText, setTypingText] = useState(\"\");\n  const textIndexRef = useRef(0);\n  const charIndexRef = useRef(0);\n  const isDeleteingRef = useRef(false);\n  const timeoutRef = useRef<NodeJS.Timeout | null>(null);\n  const { toast } = useToast();\n\n  useEffect(() => {\n    const animate = () => {\n      const currentText = typingTexts[textIndexRef.current];\n      \n      if (!isDeleteingRef.current) {\n        // Typing phase\n        if (charIndexRef.current < currentText.length) {\n          charIndexRef.current += 1;\n          setTypingText(currentText.substring(0, charIndexRef.current));\n          timeoutRef.current = setTimeout(animate, 100); // Faster typing\n        } else {\n          // Pause before deleting\n          timeoutRef.current = setTimeout(() => {\n            isDeleteingRef.current = true;\n            animate();\n          }, 1500);\n        }\n      } else {\n        // Deleting phase\n        if (charIndexRef.current > 0) {\n          charIndexRef.current -= 1;\n          setTypingText(currentText.substring(0, charIndexRef.current));\n          timeoutRef.current = setTimeout(animate, 50); // Faster deleting\n        } else {\n          // Move to next text\n          isDeleteingRef.current = false;\n          textIndexRef.current = (textIndexRef.current + 1) % typingTexts.length;\n          timeoutRef.current = setTimeout(animate, 500);\n        }\n      }\n    };\n\n    // Start animation after a short delay\n    timeoutRef.current = setTimeout(animate, 1000);\n\n    return () => {\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current);\n      }\n    };\n  }, []); // Empty dependency array - runs only once\n\n  const scrollToProjects = () => {\n    const element = document.getElementById(\"projects\");\n    if (element) {\n      const headerOffset = 80;\n      const elementPosition = element.getBoundingClientRect().top;\n      const offsetPosition = elementPosition + window.pageYOffset - headerOffset;\n\n      window.scrollTo({\n        top: offsetPosition,\n        behavior: \"smooth\"\n      });\n    }\n  };\n\n  const scrollToContact = () => {\n    const element = document.getElementById(\"contact\");\n    if (element) {\n      const headerOffset = 80;\n      const elementPosition = element.getBoundingClientRect().top;\n      const offsetPosition = elementPosition + window.pageYOffset - headerOffset;\n\n      window.scrollTo({\n        top: offsetPosition,\n        behavior: \"smooth\"\n      });\n    }\n  };\n\n  const downloadResume = () => {\n    // Download the actual resume PDF\n    const link = document.createElement('a');\n    link.href = '/assets/documents/Vansh_Sharma_Resume.pdf';\n    link.download = 'Vansh_Sharma_Resume.pdf';\n    link.target = '_blank';\n    \n    // Check if file exists before attempting download\n    fetch(link.href, { method: 'HEAD' })\n      .then(response => {\n        if (response.ok) {\n          link.click();\n          toast({\n            title: \"Resume Downloaded\",\n            description: \"Vansh Sharma's resume has been downloaded successfully.\",\n          });\n        } else {\n          // Fallback: show message if resume not found\n          toast({\n            title: \"Resume Unavailable\",\n            description: \"Resume is currently being updated. Please check back soon or contact me directly for the latest version.\",\n            variant: \"destructive\",\n          });\n        }\n      })\n      .catch(() => {\n        // Fallback for network errors\n        toast({\n          title: \"Download Error\",\n          description: \"Resume download temporarily unavailable. Please contact me directly for the latest version.\",\n          variant: \"destructive\",\n        });\n      });\n  };\n\n  return (\n    <section id=\"home\" className=\"relative min-h-screen flex items-center justify-center overflow-hidden bg-hero-bg dark:bg-hero-bg\">\n      {/* Animated background */}\n      <div className=\"absolute inset-0 opacity-10 dark:opacity-5\">\n        <motion.div\n          variants={float}\n          animate=\"animate\"\n          className=\"absolute top-20 left-10 w-72 h-72 bg-blue-500 rounded-full mix-blend-multiply filter blur-xl\"\n        />\n        <motion.div\n          variants={float}\n          animate=\"animate\"\n          style={{ animationDelay: \"2s\" }}\n          className=\"absolute top-40 right-10 w-72 h-72 bg-emerald-500 rounded-full mix-blend-multiply filter blur-xl\"\n        />\n        <motion.div\n          variants={float}\n          animate=\"animate\"\n          style={{ animationDelay: \"4s\" }}\n          className=\"absolute bottom-20 left-1/2 w-72 h-72 bg-amber-500 rounded-full mix-blend-multiply filter blur-xl\"\n        />\n      </div>\n      \n      <div className=\"container mx-auto px-4 z-10 text-center\">\n        <motion.div\n          variants={fadeInUp}\n          initial=\"hidden\"\n          animate=\"visible\"\n        >\n          <motion.h2\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: 0.2 }}\n            className=\"text-lg md:text-xl text-blue-600 dark:text-blue-400 mb-4 font-medium\"\n          >\n            Hello, I'm\n          </motion.h2>\n          \n          <motion.h1\n            initial={{ opacity: 0, y: 30 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: 0.4 }}\n            className=\"text-5xl md:text-7xl font-bold text-gray-900 dark:text-white mb-6\"\n          >\n            Vansh Sharma\n          </motion.h1>\n          \n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ delay: 0.6 }}\n            className=\"text-2xl md:text-4xl font-semibold text-gray-700 dark:text-gray-300 mb-8 h-16 flex items-center justify-center\"\n          >\n            <span className=\"border-r-2 border-blue-500 pr-1 min-h-[1em] inline-block\">\n              {typingText || \" \"}\n            </span>\n          </motion.div>\n          \n          <motion.p\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: 0.8 }}\n            className=\"text-xl text-gray-600 dark:text-gray-400 mb-12 max-w-2xl mx-auto leading-relaxed\"\n          >\n            Transforming complex datasets into actionable insights through advanced analytics and spatial intelligence.\n          </motion.p>\n          \n          <motion.div\n            initial={{ opacity: 0, y: 30 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: 1 }}\n            className=\"flex flex-col sm:flex-row gap-4 justify-center items-center\"\n          >\n            <button onClick={scrollToProjects} className=\"btn-primary\">\n              <Rocket className=\"w-5 h-5 mr-2\" />\n              View My Work\n            </button>\n            <button onClick={scrollToContact} className=\"btn-secondary\">\n              <Mail className=\"w-5 h-5 mr-2\" />\n              Get In Touch\n            </button>\n            <button onClick={downloadResume} className=\"btn-outline\">\n              <Download className=\"w-5 h-5 mr-2\" />\n              Download Resume\n            </button>\n          </motion.div>\n        </motion.div>\n      </div>\n      \n      {/* Scroll indicator */}\n      <motion.div\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        transition={{ delay: 1.5 }}\n        className=\"absolute bottom-8 left-1/2 transform -translate-x-1/2 animate-bounce\"\n      >\n        <ChevronDown className=\"w-6 h-6 text-gray-400\" />\n      </motion.div>\n    </section>\n  );\n}\n","size_bytes":7918},"client/src/components/navigation.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { Menu, X, Sun, Moon } from \"lucide-react\";\nimport { useTheme } from \"@/components/theme-provider\";\nimport { useScrollProgress } from \"@/hooks/use-scroll-progress\";\n\nconst navItems = [\n  { href: \"#home\", label: \"Home\" },\n  { href: \"#about\", label: \"About\" },\n  { href: \"#certifications\", label: \"Certifications\" },\n  { href: \"#skills\", label: \"Skills\" },\n  { href: \"#projects\", label: \"Projects\" },\n  { href: \"#education\", label: \"Education\" },\n  { href: \"#contact\", label: \"Contact\" },\n];\n\nexport function Navigation() {\n  const [isOpen, setIsOpen] = useState(false);\n  const [activeSection, setActiveSection] = useState(\"home\");\n  const { theme, toggleTheme } = useTheme();\n  const progress = useScrollProgress();\n\n  useEffect(() => {\n    const handleScroll = () => {\n      const sections = navItems.map(item => item.href.slice(1));\n      const scrollPosition = window.scrollY + 100;\n\n      for (const section of sections) {\n        const element = document.getElementById(section);\n        if (element) {\n          const { offsetTop, offsetHeight } = element;\n          if (scrollPosition >= offsetTop && scrollPosition < offsetTop + offsetHeight) {\n            setActiveSection(section);\n            break;\n          }\n        }\n      }\n    };\n\n    window.addEventListener(\"scroll\", handleScroll);\n    return () => window.removeEventListener(\"scroll\", handleScroll);\n  }, []);\n\n  const scrollToSection = (href: string) => {\n    const element = document.querySelector(href);\n    if (element) {\n      const headerOffset = 80;\n      const elementPosition = element.getBoundingClientRect().top;\n      const offsetPosition = elementPosition + window.pageYOffset - headerOffset;\n\n      window.scrollTo({\n        top: offsetPosition,\n        behavior: \"smooth\"\n      });\n    }\n    setIsOpen(false);\n  };\n\n  return (\n    <>\n      {/* Progress Bar */}\n      <div \n        className=\"progress-bar\"\n        style={{ width: `${progress}%` }}\n      />\n      \n      {/* Navigation */}\n      <motion.nav\n        initial={{ y: -100 }}\n        animate={{ y: 0 }}\n        className=\"fixed top-0 w-full z-40 bg-white/80 dark:bg-slate-900/80 backdrop-blur-lg border-b border-gray-200 dark:border-gray-700 transition-all duration-300\"\n      >\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center py-4\">\n            <motion.div\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              transition={{ delay: 0.2 }}\n              className=\"font-bold text-2xl text-blue-600 dark:text-blue-400\"\n            >\n              V<span className=\"text-gray-900 dark:text-gray-100\">S</span>\n            </motion.div>\n            \n            <div className=\"hidden md:flex space-x-8\">\n              {navItems.map((item, index) => (\n                <motion.button\n                  key={item.href}\n                  initial={{ opacity: 0, y: -20 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  transition={{ delay: 0.1 * index }}\n                  onClick={() => scrollToSection(item.href)}\n                  className={`nav-link ${activeSection === item.href.slice(1) ? \"active\" : \"\"}`}\n                >\n                  {item.label}\n                </motion.button>\n              ))}\n            </div>\n            \n            <div className=\"flex items-center space-x-4\">\n              <motion.button\n                initial={{ opacity: 0, scale: 0.8 }}\n                animate={{ opacity: 1, scale: 1 }}\n                transition={{ delay: 0.3 }}\n                onClick={toggleTheme}\n                className=\"p-2 rounded-lg bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 transition-colors duration-200\"\n              >\n                {theme === \"dark\" ? (\n                  <Sun className=\"w-5 h-5\" />\n                ) : (\n                  <Moon className=\"w-5 h-5\" />\n                )}\n              </motion.button>\n              \n              <motion.button\n                initial={{ opacity: 0, scale: 0.8 }}\n                animate={{ opacity: 1, scale: 1 }}\n                transition={{ delay: 0.4 }}\n                onClick={() => setIsOpen(!isOpen)}\n                className=\"md:hidden p-2 rounded-lg bg-gray-200 dark:bg-gray-700\"\n              >\n                {isOpen ? <X className=\"w-5 h-5\" /> : <Menu className=\"w-5 h-5\" />}\n              </motion.button>\n            </div>\n          </div>\n        </div>\n        \n        {/* Mobile Menu */}\n        {isOpen && (\n          <motion.div\n            initial={{ opacity: 0, height: 0 }}\n            animate={{ opacity: 1, height: \"auto\" }}\n            exit={{ opacity: 0, height: 0 }}\n            className=\"md:hidden bg-white dark:bg-slate-900 border-t border-gray-200 dark:border-gray-700\"\n          >\n            <div className=\"px-4 py-2 space-y-2\">\n              {navItems.map((item) => (\n                <button\n                  key={item.href}\n                  onClick={() => scrollToSection(item.href)}\n                  className=\"block w-full text-left py-2 text-gray-600 hover:text-blue-600 dark:text-gray-300 dark:hover:text-blue-400\"\n                >\n                  {item.label}\n                </button>\n              ))}\n            </div>\n          </motion.div>\n        )}\n      </motion.nav>\n    </>\n  );\n}\n","size_bytes":5426},"client/src/components/projects-section.tsx":{"content":"import { useState } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { Eye, Github, Trophy } from \"lucide-react\";\nimport { useIntersectionObserver } from \"@/hooks/use-intersection-observer\";\nimport { fadeInUp, staggerContainer, scaleIn } from \"@/lib/animations\";\n\nconst projects = [\n  {\n    id: \"zomato\",\n    title: \"Zomato Data Analysis\",\n    description: \"Conducted exploratory data analysis on Zomato customer behaviour and restaurant trends using Python (Pandas, NumPy). Identified key patterns with insights for targeted marketing strategies.\",\n    image: \"https://images.unsplash.com/photo-1551288049-bebda4e38f71?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=600&h=400\",\n    tags: [\"Python\", \"Pandas\", \"NumPy\"],\n    category: \"data-science\",\n    award: false,\n  },\n  {\n    id: \"fintrack\",\n    title: \"FinTRACK & Finsight\",\n    description: \"Developed web tools for real-time investment tracking and business financial management. Integrated APIs (Yahoo Finance, Kite Connect) with modern tech stack.\",\n    image: \"https://images.unsplash.com/photo-1554224155-6726b3ff858f?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=600&h=400\",\n    tags: [\"React.js\", \"Node.js\", \"MongoDB\"],\n    category: \"web-dev\",\n    award: false,\n  },\n  {\n    id: \"voteshield\",\n    title: \"VoteShield\",\n    description: \"Engineered secure online voting system using Ethereum blockchain and biometric authentication. Won the Reckon 6.0 Hackathon with real-time, immutable vote tracking.\",\n    image: \"https://images.unsplash.com/photo-1559526324-4b87b5e36e44?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=600&h=400\",\n    tags: [\"Ethereum\", \"Solidity\", \"Web3.py\"],\n    category: \"blockchain\",\n    award: true,\n  },\n];\n\nconst filters = [\n  { id: \"all\", label: \"All Projects\" },\n  { id: \"data-science\", label: \"Data Science\" },\n  { id: \"web-dev\", label: \"Web Development\" },\n  { id: \"blockchain\", label: \"Blockchain\" },\n];\n\nconst tagColors = {\n  Python: \"bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200\",\n  Pandas: \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\",\n  NumPy: \"bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200\",\n  \"React.js\": \"bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200\",\n  \"Node.js\": \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\",\n  MongoDB: \"bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200\",\n  Ethereum: \"bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200\",\n  Solidity: \"bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200\",\n  \"Web3.py\": \"bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200\",\n};\n\nexport function ProjectsSection() {\n  const [activeFilter, setActiveFilter] = useState(\"all\");\n  const { ref, isIntersecting } = useIntersectionObserver();\n\n  const filteredProjects = projects.filter(\n    (project) => activeFilter === \"all\" || project.category === activeFilter\n  );\n\n  const openProject = (projectId: string) => {\n    alert(`Project ${projectId} details will be available soon!`);\n  };\n\n  return (\n    <section \n      ref={ref}\n      id=\"projects\" \n      className=\"py-20 bg-white dark:bg-slate-800\"\n    >\n      <div className=\"container mx-auto px-4\">\n        <motion.div\n          variants={fadeInUp}\n          initial=\"hidden\"\n          animate={isIntersecting ? \"visible\" : \"hidden\"}\n          className=\"text-center mb-16\"\n        >\n          <h2 className=\"section-title\">Key Projects</h2>\n          <p className=\"section-subtitle\">Some of my notable work</p>\n        </motion.div>\n        \n        {/* Project Filter */}\n        <motion.div\n          variants={fadeInUp}\n          initial=\"hidden\"\n          animate={isIntersecting ? \"visible\" : \"hidden\"}\n          className=\"flex justify-center mb-12\"\n        >\n          <div className=\"flex space-x-2 bg-gray-100 dark:bg-gray-700 rounded-lg p-1\">\n            {filters.map((filter) => (\n              <button\n                key={filter.id}\n                onClick={() => setActiveFilter(filter.id)}\n                className={`filter-btn ${activeFilter === filter.id ? \"active\" : \"\"}`}\n              >\n                {filter.label}\n              </button>\n            ))}\n          </div>\n        </motion.div>\n\n        <motion.div\n          variants={staggerContainer}\n          initial=\"hidden\"\n          animate={isIntersecting ? \"visible\" : \"hidden\"}\n          className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\"\n        >\n          <AnimatePresence>\n            {filteredProjects.map((project, index) => (\n              <motion.div\n                key={project.id}\n                variants={scaleIn}\n                initial=\"hidden\"\n                animate=\"visible\"\n                exit=\"hidden\"\n                transition={{ delay: index * 0.1 }}\n                className=\"project-card\"\n              >\n                <div className=\"relative overflow-hidden\">\n                  <img \n                    src={project.image} \n                    alt={project.title} \n                    className=\"w-full h-48 object-cover\"\n                  />\n                  <div className=\"project-overlay\">\n                    <div className=\"flex space-x-3\">\n                      <button \n                        onClick={() => openProject(project.id)}\n                        className=\"w-12 h-12 bg-white rounded-full flex items-center justify-center text-gray-900 hover:bg-blue-500 hover:text-white transition-all duration-300\"\n                      >\n                        <Eye className=\"w-5 h-5\" />\n                      </button>\n                      <button className=\"w-12 h-12 bg-white rounded-full flex items-center justify-center text-gray-900 hover:bg-blue-500 hover:text-white transition-all duration-300\">\n                        <Github className=\"w-5 h-5\" />\n                      </button>\n                    </div>\n                  </div>\n                </div>\n                <div className=\"p-6\">\n                  <h3 className=\"text-xl font-semibold mb-3 flex items-center\">\n                    {project.title}\n                    {project.award && (\n                      <span className=\"ml-2 text-sm\">\n                        <Trophy className=\"w-4 h-4 text-yellow-500 inline\" />\n                      </span>\n                    )}\n                  </h3>\n                  <p className=\"text-gray-600 dark:text-gray-400 mb-4\">\n                    {project.description}\n                  </p>\n                  <div className=\"flex flex-wrap gap-2\">\n                    {project.tags.map((tag) => (\n                      <span \n                        key={tag} \n                        className={`tech-tag ${tagColors[tag as keyof typeof tagColors] || \"bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-200\"}`}\n                      >\n                        {tag}\n                      </span>\n                    ))}\n                  </div>\n                </div>\n              </motion.div>\n            ))}\n          </AnimatePresence>\n        </motion.div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":7220},"client/src/components/skills-section.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { useIntersectionObserver } from \"@/hooks/use-intersection-observer\";\nimport { fadeInUp, staggerContainer, progressBarVariants } from \"@/lib/animations\";\n\nconst skillCategories = [\n  {\n    title: \"Languages\",\n    color: \"blue\",\n    skills: [\n      { name: \"Python\", level: 90 },\n      { name: \"SQL\", level: 85 },\n      { name: \"C/C++\", level: 75 },\n    ],\n  },\n  {\n    title: \"Libraries/Framework\",\n    color: \"emerald\",\n    skills: [\n      { name: \"Pandas, NumPy\", level: 90 },\n      { name: \"Scikit-learn\", level: 80 },\n      { name: \"Matplotlib\", level: 85 },\n    ],\n  },\n  {\n    title: \"Tools & Platforms\",\n    color: \"amber\",\n    skills: [\n      { name: \"Jupyter Notebook\", level: 95 },\n      { name: \"Tableau, Power BI\", level: 80 },\n      { name: \"Git, MongoDB\", level: 75 },\n    ],\n  },\n  {\n    title: \"Other Skills\",\n    color: \"purple\",\n    skills: [\n      { name: \"APIs Integration\", level: 85 },\n      { name: \"Blockchain Development\", level: 70 },\n      { name: \"GIS & Spatial Analytics\", level: 80 },\n    ],\n  },\n];\n\nconst colorClasses = {\n  blue: {\n    title: \"text-blue-600 dark:text-blue-400\",\n    progress: \"bg-blue-500\",\n  },\n  emerald: {\n    title: \"text-emerald-600 dark:text-emerald-400\",\n    progress: \"bg-emerald-500\",\n  },\n  amber: {\n    title: \"text-amber-600 dark:text-amber-400\",\n    progress: \"bg-amber-500\",\n  },\n  purple: {\n    title: \"text-purple-600 dark:text-purple-400\",\n    progress: \"bg-purple-500\",\n  },\n};\n\nexport function SkillsSection() {\n  const { ref, isIntersecting } = useIntersectionObserver();\n\n  return (\n    <section \n      ref={ref}\n      id=\"skills\" \n      className=\"py-20 bg-gray-50 dark:bg-slate-900\"\n    >\n      <div className=\"container mx-auto px-4\">\n        <motion.div\n          variants={fadeInUp}\n          initial=\"hidden\"\n          animate={isIntersecting ? \"visible\" : \"hidden\"}\n          className=\"text-center mb-16\"\n        >\n          <h2 className=\"section-title\">Technical Expertise</h2>\n          <p className=\"section-subtitle\">Technologies and tools I work with</p>\n        </motion.div>\n        \n        <motion.div\n          variants={staggerContainer}\n          initial=\"hidden\"\n          animate={isIntersecting ? \"visible\" : \"hidden\"}\n          className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-8\"\n        >\n          {skillCategories.map((category, categoryIndex) => (\n            <motion.div\n              key={category.title}\n              variants={fadeInUp}\n              className=\"group bg-white dark:bg-slate-800 p-6 rounded-2xl shadow-lg hover:shadow-2xl border border-gray-200 dark:border-slate-700 transition-all duration-500 transform hover:-translate-y-3 hover:scale-105\"\n            >\n              <div className=\"flex items-center mb-6\">\n                <div className={`w-3 h-3 rounded-full ${colorClasses[category.color as keyof typeof colorClasses].progress} mr-3`}></div>\n                <h3 className={`text-xl font-bold ${colorClasses[category.color as keyof typeof colorClasses].title} group-hover:scale-105 transition-transform duration-300`}>\n                  {category.title}\n                </h3>\n              </div>\n              <div className=\"space-y-4\">\n                {category.skills.map((skill, skillIndex) => (\n                  <div key={skill.name} className=\"skill-item\">\n                    <div className=\"flex justify-between mb-2\">\n                      <span className=\"font-medium text-gray-900 dark:text-gray-100\">\n                        {skill.name}\n                      </span>\n                      <span className=\"text-sm text-gray-500 dark:text-gray-400\">\n                        {skill.level}%\n                      </span>\n                    </div>\n                    <div className=\"skill-bar\">\n                      <motion.div\n                        className={`skill-progress ${colorClasses[category.color as keyof typeof colorClasses].progress}`}\n                        variants={progressBarVariants}\n                        initial=\"hidden\"\n                        animate={isIntersecting ? \"visible\" : \"hidden\"}\n                        custom={`${skill.level}%`}\n                        transition={{ delay: categoryIndex * 0.1 + skillIndex * 0.2 }}\n                      />\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </motion.div>\n          ))}\n        </motion.div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":4460},"client/src/components/theme-provider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"dark\" | \"light\";\n\ntype ThemeProviderProps = {\n  children: React.ReactNode;\n  defaultTheme?: Theme;\n};\n\ntype ThemeProviderState = {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n  toggleTheme: () => void;\n};\n\nconst ThemeProviderContext = createContext<ThemeProviderState | undefined>(undefined);\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"light\",\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(() => {\n    if (typeof window !== \"undefined\") {\n      return (localStorage.getItem(\"theme\") as Theme) || defaultTheme;\n    }\n    return defaultTheme;\n  });\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n    root.classList.remove(\"light\", \"dark\");\n    root.classList.add(theme);\n    localStorage.setItem(\"theme\", theme);\n  }, [theme]);\n\n  const toggleTheme = () => {\n    setTheme(theme === \"dark\" ? \"light\" : \"dark\");\n  };\n\n  const value = {\n    theme,\n    setTheme,\n    toggleTheme,\n  };\n\n  return (\n    <ThemeProviderContext.Provider value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext);\n\n  if (context === undefined)\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n\n  return context;\n};\n","size_bytes":1370},"client/src/hooks/use-intersection-observer.tsx":{"content":"import { useEffect, useRef, useState } from \"react\";\n\ninterface UseIntersectionObserverProps {\n  threshold?: number;\n  rootMargin?: string;\n  triggerOnce?: boolean;\n}\n\nexport function useIntersectionObserver({\n  threshold = 0.1,\n  rootMargin = \"0px\",\n  triggerOnce = true,\n}: UseIntersectionObserverProps = {}) {\n  const [isIntersecting, setIsIntersecting] = useState(false);\n  const [hasTriggered, setHasTriggered] = useState(false);\n  const ref = useRef<HTMLElement>(null);\n\n  useEffect(() => {\n    const element = ref.current;\n    if (!element) return;\n\n    const observer = new IntersectionObserver(\n      ([entry]) => {\n        const isElementIntersecting = entry.isIntersecting;\n        \n        if (isElementIntersecting && (!triggerOnce || !hasTriggered)) {\n          setIsIntersecting(true);\n          if (triggerOnce) {\n            setHasTriggered(true);\n          }\n        } else if (!triggerOnce) {\n          setIsIntersecting(isElementIntersecting);\n        }\n      },\n      { threshold, rootMargin }\n    );\n\n    observer.observe(element);\n\n    return () => observer.disconnect();\n  }, [threshold, rootMargin, triggerOnce, hasTriggered]);\n\n  return { ref, isIntersecting };\n}\n","size_bytes":1190},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-scroll-progress.tsx":{"content":"import { useState, useEffect } from \"react\";\n\nexport function useScrollProgress() {\n  const [progress, setProgress] = useState(0);\n\n  useEffect(() => {\n    const updateProgress = () => {\n      const scrolled = window.scrollY;\n      const maxHeight = document.documentElement.scrollHeight - window.innerHeight;\n      const progressPercentage = (scrolled / maxHeight) * 100;\n      setProgress(Math.min(progressPercentage, 100));\n    };\n\n    window.addEventListener(\"scroll\", updateProgress);\n    updateProgress(); // Set initial value\n\n    return () => window.removeEventListener(\"scroll\", updateProgress);\n  }, []);\n\n  return progress;\n}\n","size_bytes":637},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/animations.ts":{"content":"import { Variants } from \"framer-motion\";\n\nexport const fadeInUp: Variants = {\n  hidden: {\n    opacity: 0,\n    y: 50,\n  },\n  visible: {\n    opacity: 1,\n    y: 0,\n    transition: {\n      duration: 0.8,\n      ease: \"easeOut\",\n    },\n  },\n};\n\nexport const slideInLeft: Variants = {\n  hidden: {\n    opacity: 0,\n    x: -100,\n  },\n  visible: {\n    opacity: 1,\n    x: 0,\n    transition: {\n      duration: 0.8,\n      ease: \"easeOut\",\n    },\n  },\n};\n\nexport const slideInRight: Variants = {\n  hidden: {\n    opacity: 0,\n    x: 100,\n  },\n  visible: {\n    opacity: 1,\n    x: 0,\n    transition: {\n      duration: 0.8,\n      ease: \"easeOut\",\n    },\n  },\n};\n\nexport const staggerContainer: Variants = {\n  hidden: {},\n  visible: {\n    transition: {\n      staggerChildren: 0.1,\n    },\n  },\n};\n\nexport const scaleIn: Variants = {\n  hidden: {\n    opacity: 0,\n    scale: 0.8,\n  },\n  visible: {\n    opacity: 1,\n    scale: 1,\n    transition: {\n      duration: 0.5,\n      ease: \"easeOut\",\n    },\n  },\n};\n\nexport const float: Variants = {\n  animate: {\n    y: [-20, 20, -20],\n    transition: {\n      duration: 6,\n      repeat: Infinity,\n      ease: \"easeInOut\",\n    },\n  },\n};\n\nexport const progressBarVariants: Variants = {\n  hidden: { width: \"0%\" },\n  visible: (width: string) => ({\n    width,\n    transition: {\n      duration: 1.5,\n      ease: \"easeOut\",\n    },\n  }),\n};\n","size_bytes":1349},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/home.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { Navigation } from \"@/components/navigation\";\nimport { HeroSection } from \"@/components/hero-section\";\nimport { AboutSection } from \"@/components/about-section\";\nimport { CertificationsSection } from \"@/components/certifications-section\";\nimport { EnhancedSkillsSection } from \"@/components/enhanced-skills-section\";\nimport { DataScienceVisualization } from \"@/components/data-science-visualization\";\nimport { ProjectsSection } from \"@/components/projects-section\";\nimport { EducationSection } from \"@/components/education-section\";\nimport { ContactSection } from \"@/components/contact-section\";\nimport { FloatingSocial } from \"@/components/floating-social\";\n\nfunction LoadingScreen() {\n  return (\n    <motion.div\n      initial={{ opacity: 1 }}\n      exit={{ opacity: 0 }}\n      transition={{ duration: 0.5 }}\n      className=\"fixed inset-0 z-50 flex items-center justify-center bg-white dark:bg-slate-900\"\n    >\n      <div className=\"text-center\">\n        <div className=\"loading-spinner mx-auto mb-4\"></div>\n        <p className=\"text-lg font-medium text-gray-600 dark:text-gray-300\">\n          Loading Portfolio...\n        </p>\n      </div>\n    </motion.div>\n  );\n}\n\nfunction Footer() {\n  return (\n    <footer className=\"bg-gray-900 text-white py-12\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"flex flex-col md:flex-row justify-between items-center\">\n          <div className=\"mb-6 md:mb-0\">\n            <h3 className=\"text-2xl font-bold\">Vansh Sharma</h3>\n            <p className=\"text-gray-400\">Data Science Enthusiast</p>\n          </div>\n          <div className=\"flex space-x-6\">\n            <a \n              href=\"https://www.linkedin.com/in/vansh-sharma-778308357/\" \n              target=\"_blank\" \n              rel=\"noopener noreferrer\"\n              className=\"text-gray-400 hover:text-white transition-colors\"\n            >\n              <i className=\"fab fa-linkedin-in text-xl\"></i>\n            </a>\n            <a \n              href=\"https://github.com/sharmaji0411\" \n              target=\"_blank\" \n              rel=\"noopener noreferrer\"\n              className=\"text-gray-400 hover:text-white transition-colors\"\n            >\n              <i className=\"fab fa-github text-xl\"></i>\n            </a>\n            <a \n              href=\"mailto:vanshsharma.official0411@gmail.com\" \n              className=\"text-gray-400 hover:text-white transition-colors\"\n            >\n              <i className=\"fas fa-envelope text-xl\"></i>\n            </a>\n          </div>\n        </div>\n        <div className=\"border-t border-gray-800 mt-8 pt-8 text-center text-gray-400\">\n          <p>&copy; 2024 Vansh Sharma. All rights reserved.</p>\n        </div>\n      </div>\n    </footer>\n  );\n}\n\nexport default function Home() {\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    // Simulate loading time\n    const timer = setTimeout(() => {\n      setIsLoading(false);\n    }, 2000);\n\n    return () => clearTimeout(timer);\n  }, []);\n\n  return (\n    <>\n      <AnimatePresence mode=\"wait\">\n        {isLoading && <LoadingScreen />}\n      </AnimatePresence>\n      \n      {!isLoading && (\n        <motion.div\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          transition={{ duration: 0.5 }}\n        >\n          <Navigation />\n          <FloatingSocial />\n          <HeroSection />\n          <AboutSection />\n          <CertificationsSection />\n          <EnhancedSkillsSection />\n          <DataScienceVisualization />\n          <ProjectsSection />\n          <EducationSection />\n          <ContactSection />\n          <Footer />\n        </motion.div>\n      )}\n    </>\n  );\n}\n","size_bytes":3765},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/public/assets/documents/README.md":{"content":"# Resume Storage\n\n## How to Add Your Resume\n\n1. **Save your resume as a PDF** with the exact filename: `Vansh_Sharma_Resume.pdf`\n\n2. **Place the PDF file in this directory**: `client/public/assets/documents/`\n\n3. **File structure should look like this**:\n   ```\n   client/public/assets/documents/\n   ├── README.md (this file)\n   └── Vansh_Sharma_Resume.pdf (your resume)\n   ```\n\n4. **That's it!** The download button will automatically work with your resume.\n\n## Important Notes\n\n- **Filename must be exact**: `Vansh_Sharma_Resume.pdf` (case-sensitive)\n- **File format**: PDF only\n- **File size**: Keep under 5MB for fast downloads\n- **Updates**: Simply replace the file to update your resume\n\n## Testing the Download\n\nAfter adding your resume file:\n\n1. Start your development server: `npm run dev`\n2. Go to your portfolio website\n3. Click the \"Download Resume\" button in the hero section\n4. Your resume should download automatically\n\n## Troubleshooting\n\n**Button doesn't work?**\n- Check the filename is exactly `Vansh_Sharma_Resume.pdf`\n- Make sure the file is in the correct directory\n- Refresh your browser and try again\n\n**File not found error?**\n- The system will show a friendly message if the resume isn't found\n- Double-check the file location and name\n\n## Alternative: Custom Resume URL\n\nIf you prefer to host your resume elsewhere (Google Drive, Dropbox, etc.):\n\n1. Get a direct download link to your PDF\n2. Edit `client/src/components/hero-section.tsx`\n3. Replace the `link.href` with your custom URL\n\nExample:\n```javascript\nlink.href = 'https://drive.google.com/file/d/your-file-id/view?usp=drive_link';\n```","size_bytes":1631},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}